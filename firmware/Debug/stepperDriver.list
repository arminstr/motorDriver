
stepperDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006a80  08006a80  00016a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c78  08006c78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c80  08006c80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044c0  20000010  08006c94  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200044d0  08006c94  000244d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee07  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002336  00000000  00000000  0002ee43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00031f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000209a0  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be96  00000000  00000000  000534e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4fea  00000000  00000000  0005f37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  001243e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a64 	.word	0x08006a64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006a64 	.word	0x08006a64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f000 b972 	b.w	8000dc0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9e08      	ldr	r6, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	4688      	mov	r8, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14b      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4615      	mov	r5, r2
 8000b06:	d967      	bls.n	8000bd8 <__udivmoddi4+0xe4>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0720 	rsb	r7, r2, #32
 8000b12:	fa01 f302 	lsl.w	r3, r1, r2
 8000b16:	fa20 f707 	lsr.w	r7, r0, r7
 8000b1a:	4095      	lsls	r5, r2
 8000b1c:	ea47 0803 	orr.w	r8, r7, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b2c:	fa1f fc85 	uxth.w	ip, r5
 8000b30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b38:	fb07 f10c 	mul.w	r1, r7, ip
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d909      	bls.n	8000b54 <__udivmoddi4+0x60>
 8000b40:	18eb      	adds	r3, r5, r3
 8000b42:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b46:	f080 811b 	bcs.w	8000d80 <__udivmoddi4+0x28c>
 8000b4a:	4299      	cmp	r1, r3
 8000b4c:	f240 8118 	bls.w	8000d80 <__udivmoddi4+0x28c>
 8000b50:	3f02      	subs	r7, #2
 8000b52:	442b      	add	r3, r5
 8000b54:	1a5b      	subs	r3, r3, r1
 8000b56:	b2a4      	uxth	r4, r4
 8000b58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b68:	45a4      	cmp	ip, r4
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x8c>
 8000b6c:	192c      	adds	r4, r5, r4
 8000b6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b72:	f080 8107 	bcs.w	8000d84 <__udivmoddi4+0x290>
 8000b76:	45a4      	cmp	ip, r4
 8000b78:	f240 8104 	bls.w	8000d84 <__udivmoddi4+0x290>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	442c      	add	r4, r5
 8000b80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b84:	eba4 040c 	sub.w	r4, r4, ip
 8000b88:	2700      	movs	r7, #0
 8000b8a:	b11e      	cbz	r6, 8000b94 <__udivmoddi4+0xa0>
 8000b8c:	40d4      	lsrs	r4, r2
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e9c6 4300 	strd	r4, r3, [r6]
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0xbe>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	f000 80eb 	beq.w	8000d7a <__udivmoddi4+0x286>
 8000ba4:	2700      	movs	r7, #0
 8000ba6:	e9c6 0100 	strd	r0, r1, [r6]
 8000baa:	4638      	mov	r0, r7
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f783 	clz	r7, r3
 8000bb6:	2f00      	cmp	r7, #0
 8000bb8:	d147      	bne.n	8000c4a <__udivmoddi4+0x156>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0xd0>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80fa 	bhi.w	8000db8 <__udivmoddi4+0x2c4>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4698      	mov	r8, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d0e0      	beq.n	8000b94 <__udivmoddi4+0xa0>
 8000bd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bd6:	e7dd      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000bd8:	b902      	cbnz	r2, 8000bdc <__udivmoddi4+0xe8>
 8000bda:	deff      	udf	#255	; 0xff
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	f040 808f 	bne.w	8000d04 <__udivmoddi4+0x210>
 8000be6:	1b49      	subs	r1, r1, r5
 8000be8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bec:	fa1f f885 	uxth.w	r8, r5
 8000bf0:	2701      	movs	r7, #1
 8000bf2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bf6:	0c23      	lsrs	r3, r4, #16
 8000bf8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb08 f10c 	mul.w	r1, r8, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x124>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x122>
 8000c10:	4299      	cmp	r1, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2bc>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1a59      	subs	r1, r3, r1
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x14c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x14a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80b6 	bhi.w	8000daa <__udivmoddi4+0x2b6>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e79f      	b.n	8000b8a <__udivmoddi4+0x96>
 8000c4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c4e:	40bb      	lsls	r3, r7
 8000c50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c58:	fa01 f407 	lsl.w	r4, r1, r7
 8000c5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c68:	4325      	orrs	r5, r4
 8000c6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c6e:	0c2c      	lsrs	r4, r5, #16
 8000c70:	fb08 3319 	mls	r3, r8, r9, r3
 8000c74:	fa1f fa8e 	uxth.w	sl, lr
 8000c78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c80:	429c      	cmp	r4, r3
 8000c82:	fa02 f207 	lsl.w	r2, r2, r7
 8000c86:	fa00 f107 	lsl.w	r1, r0, r7
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b0>
 8000c8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c94:	f080 8087 	bcs.w	8000da6 <__udivmoddi4+0x2b2>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f240 8084 	bls.w	8000da6 <__udivmoddi4+0x2b2>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4473      	add	r3, lr
 8000ca4:	1b1b      	subs	r3, r3, r4
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb8:	45a2      	cmp	sl, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1da>
 8000cbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc4:	d26b      	bcs.n	8000d9e <__udivmoddi4+0x2aa>
 8000cc6:	45a2      	cmp	sl, r4
 8000cc8:	d969      	bls.n	8000d9e <__udivmoddi4+0x2aa>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4474      	add	r4, lr
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd6:	eba4 040a 	sub.w	r4, r4, sl
 8000cda:	454c      	cmp	r4, r9
 8000cdc:	46c2      	mov	sl, r8
 8000cde:	464b      	mov	r3, r9
 8000ce0:	d354      	bcc.n	8000d8c <__udivmoddi4+0x298>
 8000ce2:	d051      	beq.n	8000d88 <__udivmoddi4+0x294>
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d069      	beq.n	8000dbc <__udivmoddi4+0x2c8>
 8000ce8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cec:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	40fc      	lsrs	r4, r7
 8000cf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000d00:	2700      	movs	r7, #0
 8000d02:	e747      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f703 	lsr.w	r7, r0, r3
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	4338      	orrs	r0, r7
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d22:	fa1f f885 	uxth.w	r8, r5
 8000d26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2e:	fb07 f308 	mul.w	r3, r7, r8
 8000d32:	428b      	cmp	r3, r1
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x256>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d40:	d22f      	bcs.n	8000da2 <__udivmoddi4+0x2ae>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d92d      	bls.n	8000da2 <__udivmoddi4+0x2ae>
 8000d46:	3f02      	subs	r7, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1acb      	subs	r3, r1, r3
 8000d4c:	b281      	uxth	r1, r0
 8000d4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb00 f308 	mul.w	r3, r0, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x27e>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d68:	d217      	bcs.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d915      	bls.n	8000d9a <__udivmoddi4+0x2a6>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1ac9      	subs	r1, r1, r3
 8000d74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d78:	e73b      	b.n	8000bf2 <__udivmoddi4+0xfe>
 8000d7a:	4637      	mov	r7, r6
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e709      	b.n	8000b94 <__udivmoddi4+0xa0>
 8000d80:	4607      	mov	r7, r0
 8000d82:	e6e7      	b.n	8000b54 <__udivmoddi4+0x60>
 8000d84:	4618      	mov	r0, r3
 8000d86:	e6fb      	b.n	8000b80 <__udivmoddi4+0x8c>
 8000d88:	4541      	cmp	r1, r8
 8000d8a:	d2ab      	bcs.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d90:	eb69 020e 	sbc.w	r2, r9, lr
 8000d94:	3801      	subs	r0, #1
 8000d96:	4613      	mov	r3, r2
 8000d98:	e7a4      	b.n	8000ce4 <__udivmoddi4+0x1f0>
 8000d9a:	4660      	mov	r0, ip
 8000d9c:	e7e9      	b.n	8000d72 <__udivmoddi4+0x27e>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	e795      	b.n	8000cce <__udivmoddi4+0x1da>
 8000da2:	4667      	mov	r7, ip
 8000da4:	e7d1      	b.n	8000d4a <__udivmoddi4+0x256>
 8000da6:	4681      	mov	r9, r0
 8000da8:	e77c      	b.n	8000ca4 <__udivmoddi4+0x1b0>
 8000daa:	3802      	subs	r0, #2
 8000dac:	442c      	add	r4, r5
 8000dae:	e747      	b.n	8000c40 <__udivmoddi4+0x14c>
 8000db0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000db4:	442b      	add	r3, r5
 8000db6:	e72f      	b.n	8000c18 <__udivmoddi4+0x124>
 8000db8:	4638      	mov	r0, r7
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xda>
 8000dbc:	4637      	mov	r7, r6
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0xa0>

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <MX_ADC1_Init+0xdc>)
 8000dda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e08:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	481c      	ldr	r0, [pc, #112]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e2a:	f001 ff3f 	bl	8002cac <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e34:	f001 f9d8 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e40:	2307      	movs	r3, #7
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4814      	ldr	r0, [pc, #80]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e4a:	f002 f883 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e54:	f001 f9c8 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e66:	f002 f875 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000e70:	f001 f9ba 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e74:	2309      	movs	r3, #9
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_ADC1_Init+0xd8>)
 8000e86:	f002 f865 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000e90:	f001 f9aa 	bl	80021e8 <Error_Handler>
  }

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000124 	.word	0x20000124
 8000ea0:	40012000 	.word	0x40012000

08000ea4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <MX_ADC2_Init+0xbc>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec4:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ee8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000f0a:	f001 fecf 	bl	8002cac <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000f14:	f001 f968 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f20:	2307      	movs	r3, #7
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000f2a:	f002 f813 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000f34:	f001 f958 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC2_Init+0xb8>)
 8000f46:	f002 f805 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8000f50:	f001 f94a 	bl	80021e8 <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000007c 	.word	0x2000007c
 8000f60:	40012100 	.word	0x40012100

08000f64 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <MX_ADC3_Init+0x9c>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MX_ADC3_Init+0xa0>)
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fc6:	f001 fe71 	bl	8002cac <HAL_ADC_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000fd0:	f001 f90a 	bl	80021e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC3_Init+0x98>)
 8000fe6:	f001 ffb5 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f001 f8fa 	bl	80021e8 <Error_Handler>
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000016c 	.word	0x2000016c
 8001000:	40012200 	.word	0x40012200
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b090      	sub	sp, #64	; 0x40
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a85      	ldr	r2, [pc, #532]	; (800123c <HAL_ADC_MspInit+0x234>)
 8001026:	4293      	cmp	r3, r2
 8001028:	f040 808d 	bne.w	8001146 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001030:	4b83      	ldr	r3, [pc, #524]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	4a82      	ldr	r2, [pc, #520]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103a:	6453      	str	r3, [r2, #68]	; 0x44
 800103c:	4b80      	ldr	r3, [pc, #512]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
 800104c:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b79      	ldr	r3, [pc, #484]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	4b75      	ldr	r3, [pc, #468]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a74      	ldr	r2, [pc, #464]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b72      	ldr	r3, [pc, #456]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	4b6e      	ldr	r3, [pc, #440]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a6d      	ldr	r2, [pc, #436]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = IREF_2_Pin;
 800109c:	2308      	movs	r3, #8
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	2303      	movs	r3, #3
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IREF_2_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4865      	ldr	r0, [pc, #404]	; (8001244 <HAL_ADC_MspInit+0x23c>)
 80010b0:	f002 ff3c 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_1_Pin;
 80010b4:	2310      	movs	r3, #16
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b8:	2303      	movs	r3, #3
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I_1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c4:	4619      	mov	r1, r3
 80010c6:	4860      	ldr	r0, [pc, #384]	; (8001248 <HAL_ADC_MspInit+0x240>)
 80010c8:	f002 ff30 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HOME_IN_Pin;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HOME_IN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	485b      	ldr	r0, [pc, #364]	; (800124c <HAL_ADC_MspInit+0x244>)
 80010e0:	f002 ff24 	bl	8003f2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010e4:	4b5a      	ldr	r3, [pc, #360]	; (8001250 <HAL_ADC_MspInit+0x248>)
 80010e6:	4a5b      	ldr	r2, [pc, #364]	; (8001254 <HAL_ADC_MspInit+0x24c>)
 80010e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_ADC_MspInit+0x248>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f0:	4b57      	ldr	r3, [pc, #348]	; (8001250 <HAL_ADC_MspInit+0x248>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_ADC_MspInit+0x248>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <HAL_ADC_MspInit+0x248>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001104:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_ADC_MspInit+0x248>)
 8001106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_ADC_MspInit+0x248>)
 800110e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001112:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <HAL_ADC_MspInit+0x248>)
 8001116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800111c:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_ADC_MspInit+0x248>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_ADC_MspInit+0x248>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001128:	4849      	ldr	r0, [pc, #292]	; (8001250 <HAL_ADC_MspInit+0x248>)
 800112a:	f002 fb91 	bl	8003850 <HAL_DMA_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001134:	f001 f858 	bl	80021e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_ADC_MspInit+0x248>)
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
 800113e:	4a44      	ldr	r2, [pc, #272]	; (8001250 <HAL_ADC_MspInit+0x248>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001144:	e0ec      	b.n	8001320 <HAL_ADC_MspInit+0x318>
  else if(adcHandle->Instance==ADC2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_ADC_MspInit+0x250>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f040 8089 	bne.w	8001264 <HAL_ADC_MspInit+0x25c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800115c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <HAL_ADC_MspInit+0x238>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_ADC_MspInit+0x238>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IREF_1_Pin;
 80011a6:	2304      	movs	r3, #4
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IREF_1_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4822      	ldr	r0, [pc, #136]	; (8001244 <HAL_ADC_MspInit+0x23c>)
 80011ba:	f002 feb7 	bl	8003f2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_2_Pin;
 80011be:	2320      	movs	r3, #32
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I_2_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ce:	4619      	mov	r1, r3
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <HAL_ADC_MspInit+0x240>)
 80011d2:	f002 feab 	bl	8003f2c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <HAL_ADC_MspInit+0x258>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_ADC_MspInit+0x254>)
 80011fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_ADC_MspInit+0x254>)
 8001202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001206:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_ADC_MspInit+0x254>)
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_ADC_MspInit+0x254>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_ADC_MspInit+0x254>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_ADC_MspInit+0x254>)
 800121e:	f002 fb17 	bl	8003850 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x224>
      Error_Handler();
 8001228:	f000 ffde 	bl	80021e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <HAL_ADC_MspInit+0x254>)
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_ADC_MspInit+0x254>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001238:	e072      	b.n	8001320 <HAL_ADC_MspInit+0x318>
 800123a:	bf00      	nop
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020800 	.word	0x40020800
 800124c:	40020400 	.word	0x40020400
 8001250:	200001b4 	.word	0x200001b4
 8001254:	40026410 	.word	0x40026410
 8001258:	40012100 	.word	0x40012100
 800125c:	20000214 	.word	0x20000214
 8001260:	40026440 	.word	0x40026440
  else if(adcHandle->Instance==ADC3)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <HAL_ADC_MspInit+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d158      	bne.n	8001320 <HAL_ADC_MspInit+0x318>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_ADC_MspInit+0x324>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a2d      	ldr	r2, [pc, #180]	; (800132c <HAL_ADC_MspInit+0x324>)
 8001278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_ADC_MspInit+0x324>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b27      	ldr	r3, [pc, #156]	; (800132c <HAL_ADC_MspInit+0x324>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_ADC_MspInit+0x324>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_ADC_MspInit+0x324>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = V__SENSE_Pin;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012aa:	2303      	movs	r3, #3
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(V__SENSE_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b6:	4619      	mov	r1, r3
 80012b8:	481d      	ldr	r0, [pc, #116]	; (8001330 <HAL_ADC_MspInit+0x328>)
 80012ba:	f002 fe37 	bl	8003f2c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_ADC_MspInit+0x330>)
 80012c2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012de:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 8001306:	f002 faa3 	bl	8003850 <HAL_DMA_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_ADC_MspInit+0x30c>
      Error_Handler();
 8001310:	f000 ff6a 	bl	80021e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
 800131a:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_ADC_MspInit+0x32c>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001320:	bf00      	nop
 8001322:	3740      	adds	r7, #64	; 0x40
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40012200 	.word	0x40012200
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	200000c4 	.word	0x200000c4
 8001338:	40026428 	.word	0x40026428

0800133c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_CAN1_Init+0x60>)
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <MX_CAN1_Init+0x64>)
 8001344:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_CAN1_Init+0x60>)
 8001348:	2210      	movs	r2, #16
 800134a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_CAN1_Init+0x60>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_CAN1_Init+0x60>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_CAN1_Init+0x60>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_CAN1_Init+0x60>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_CAN1_Init+0x60>)
 8001366:	2200      	movs	r2, #0
 8001368:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_CAN1_Init+0x60>)
 800136c:	2200      	movs	r2, #0
 800136e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_CAN1_Init+0x60>)
 8001372:	2200      	movs	r2, #0
 8001374:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_CAN1_Init+0x60>)
 8001378:	2200      	movs	r2, #0
 800137a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_CAN1_Init+0x60>)
 800137e:	2200      	movs	r2, #0
 8001380:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_CAN1_Init+0x60>)
 8001384:	2200      	movs	r2, #0
 8001386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_CAN1_Init+0x60>)
 800138a:	f002 f883 	bl	8003494 <HAL_CAN_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001394:	f000 ff28 	bl	80021e8 <Error_Handler>
  }

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000274 	.word	0x20000274
 80013a0:	40006400 	.word	0x40006400

080013a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_CAN_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12c      	bne.n	8001420 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_CAN_MspInit+0x88>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001410:	2309      	movs	r3, #9
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_CAN_MspInit+0x8c>)
 800141c:	f002 fd86 	bl	8003f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40006400 	.word	0x40006400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020400 	.word	0x40020400

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_DMA_Init+0x5c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <MX_DMA_Init+0x5c>)
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_DMA_Init+0x5c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2038      	movs	r0, #56	; 0x38
 800145c:	f002 f9ce 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001460:	2038      	movs	r0, #56	; 0x38
 8001462:	f002 f9e7 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2039      	movs	r0, #57	; 0x39
 800146c:	f002 f9c6 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001470:	2039      	movs	r0, #57	; 0x39
 8001472:	f002 f9df 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	203a      	movs	r0, #58	; 0x3a
 800147c:	f002 f9be 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001480:	203a      	movs	r0, #58	; 0x3a
 8001482:	f002 f9d7 	bl	8003834 <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a6a      	ldr	r2, [pc, #424]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a63      	ldr	r2, [pc, #396]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b5a      	ldr	r3, [pc, #360]	; (800165c <MX_GPIO_Init+0x1c8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b56      	ldr	r3, [pc, #344]	; (800165c <MX_GPIO_Init+0x1c8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a55      	ldr	r2, [pc, #340]	; (800165c <MX_GPIO_Init+0x1c8>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b53      	ldr	r3, [pc, #332]	; (800165c <MX_GPIO_Init+0x1c8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <MX_GPIO_Init+0x1c8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a4e      	ldr	r2, [pc, #312]	; (800165c <MX_GPIO_Init+0x1c8>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <MX_GPIO_Init+0x1c8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_EN_GPIO_Port, CAN1_EN_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153c:	4848      	ldr	r0, [pc, #288]	; (8001660 <MX_GPIO_Init+0x1cc>)
 800153e:	f002 fea7 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRST_CD_Pin|NRST_AB_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001548:	4846      	ldr	r0, [pc, #280]	; (8001664 <MX_GPIO_Init+0x1d0>)
 800154a:	f002 fea1 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin|LED_HEARTBEAT_Pin|LED_RX_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001554:	4842      	ldr	r0, [pc, #264]	; (8001660 <MX_GPIO_Init+0x1cc>)
 8001556:	f002 fe9b 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2104      	movs	r1, #4
 800155e:	4842      	ldr	r0, [pc, #264]	; (8001668 <MX_GPIO_Init+0x1d4>)
 8001560:	f002 fe96 	bl	8004290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN1_RS_Pin;
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN1_RS_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4839      	ldr	r0, [pc, #228]	; (8001660 <MX_GPIO_Init+0x1cc>)
 800157a:	f002 fcd7 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CAN1_EN_Pin|LED_ERROR_Pin|LED_HEARTBEAT_Pin|LED_RX_Pin;
 800157e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4832      	ldr	r0, [pc, #200]	; (8001660 <MX_GPIO_Init+0x1cc>)
 8001598:	f002 fcc8 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STO_IN_Pin|NOTW_Pin|NFAULT_Pin;
 800159c:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <MX_GPIO_Init+0x1d8>)
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	482b      	ldr	r0, [pc, #172]	; (8001660 <MX_GPIO_Init+0x1cc>)
 80015b2:	f002 fcbb 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015b6:	2304      	movs	r3, #4
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4826      	ldr	r0, [pc, #152]	; (8001664 <MX_GPIO_Init+0x1d0>)
 80015ca:	f002 fcaf 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRST_CD_Pin|NRST_AB_Pin;
 80015ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	481f      	ldr	r0, [pc, #124]	; (8001664 <MX_GPIO_Init+0x1d0>)
 80015e8:	f002 fca0 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BRAKE_MON_Pin;
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <MX_GPIO_Init+0x1d8>)
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BRAKE_MON_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	481b      	ldr	r0, [pc, #108]	; (8001670 <MX_GPIO_Init+0x1dc>)
 8001602:	f002 fc93 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001606:	2304      	movs	r3, #4
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <MX_GPIO_Init+0x1d4>)
 800161e:	f002 fc85 	bl	8003f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2008      	movs	r0, #8
 8001628:	f002 f8e8 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800162c:	2008      	movs	r0, #8
 800162e:	f002 f901 	bl	8003834 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2017      	movs	r0, #23
 8001638:	f002 f8e0 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800163c:	2017      	movs	r0, #23
 800163e:	f002 f8f9 	bl	8003834 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2028      	movs	r0, #40	; 0x28
 8001648:	f002 f8d8 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f002 f8f1 	bl	8003834 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020400 	.word	0x40020400
 8001668:	40020c00 	.word	0x40020c00
 800166c:	10310000 	.word	0x10310000
 8001670:	40020000 	.word	0x40020000

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001678:	f001 fad6 	bl	8002c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167c:	f000 f82a 	bl	80016d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  lastCycleTick = HAL_GetTick();
 8001680:	f001 fb08 	bl	8002c94 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <main+0x58>)
 8001688:	601a      	str	r2, [r3, #0]
  lastLEDTick = HAL_GetTick();
 800168a:	f001 fb03 	bl	8002c94 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <main+0x5c>)
 8001692:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f7ff fefe 	bl	8001494 <MX_GPIO_Init>
  MX_DMA_Init();
 8001698:	f7ff fecc 	bl	8001434 <MX_DMA_Init>
  MX_ADC1_Init();
 800169c:	f7ff fb92 	bl	8000dc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016a0:	f7ff fc00 	bl	8000ea4 <MX_ADC2_Init>
  MX_CAN1_Init();
 80016a4:	f7ff fe4a 	bl	800133c <MX_CAN1_Init>
  MX_TIM1_Init();
 80016a8:	f000 febe 	bl	8002428 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016ac:	f000 ff40 	bl	8002530 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b0:	f000 ff96 	bl	80025e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016b4:	f000 ffee 	bl	8002694 <MX_TIM4_Init>
  MX_TIM5_Init();
 80016b8:	f001 f846 	bl	8002748 <MX_TIM5_Init>
  MX_ADC3_Init();
 80016bc:	f7ff fc52 	bl	8000f64 <MX_ADC3_Init>
  MX_TIM8_Init();
 80016c0:	f001 f896 	bl	80027f0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  initializePeripherals();
 80016c4:	f000 f8ec 	bl	80018a0 <initializePeripherals>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <main+0x54>
 80016ca:	bf00      	nop
 80016cc:	2000004c 	.word	0x2000004c
 80016d0:	20000050 	.word	0x20000050

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f95e 	bl	80059a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <SystemClock_Config+0xcc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <SystemClock_Config+0xd0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001744:	2319      	movs	r3, #25
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174e:	2302      	movs	r3, #2
 8001750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001752:	2304      	movs	r3, #4
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fdca 	bl	80042f4 <HAL_RCC_OscConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001766:	f000 fd3f 	bl	80021e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2105      	movs	r1, #5
 8001788:	4618      	mov	r0, r3
 800178a:	f003 f823 	bl	80047d4 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001794:	f000 fd28 	bl	80021e8 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <loop>:

/* USER CODE BEGIN 4 */

/* LOOP function called every 100us by TIM7 */
void loop(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	if(HAL_GetTick() >= lastCycleTick + EXECUTION_PERIOD_MS)
 80017ac:	f001 fa72 	bl	8002c94 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <loop+0xd4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d352      	bcc.n	8001862 <loop+0xba>
	{
		lastCycleTick = HAL_GetTick();
 80017bc:	f001 fa6a 	bl	8002c94 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <loop+0xd4>)
 80017c4:	601a      	str	r2, [r3, #0]

		if(HAL_GetTick() > lastLEDTick + LED_TOGGLE_PERIOD_MS)
 80017c6:	f001 fa65 	bl	8002c94 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <loop+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d92c      	bls.n	8001832 <loop+0x8a>
		{
			lastLEDTick = HAL_GetTick();
 80017d8:	f001 fa5c 	bl	8002c94 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <loop+0xd8>)
 80017e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, LED_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e8:	4826      	ldr	r0, [pc, #152]	; (8001884 <loop+0xdc>)
 80017ea:	f002 fd51 	bl	8004290 <HAL_GPIO_WritePin>
			LED_FLAG = 1;
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <loop+0xe0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
			if(lastLEDTick % 2 == 0)
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <loop+0xd8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <loop+0x72>
			{
				if( !ERROR_FLAG )
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <loop+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d103      	bne.n	8001810 <loop+0x68>
					targetPos = 0;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <loop+0xe8>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e010      	b.n	8001832 <loop+0x8a>
				else
					targetPos = encoderPosition;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <loop+0xec>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <loop+0xe8>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e00b      	b.n	8001832 <loop+0x8a>
			}
			else
			{
				if( !ERROR_FLAG )
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <loop+0xe4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <loop+0x82>
					targetPos = -3000;
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <loop+0xe8>)
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <loop+0xf0>)
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e003      	b.n	8001832 <loop+0x8a>
				else
					targetPos = encoderPosition;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <loop+0xec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <loop+0xe8>)
 8001830:	6013      	str	r3, [r2, #0]
			}


		}

		LED_FLAG ++;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <loop+0xe0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a13      	ldr	r2, [pc, #76]	; (8001888 <loop+0xe0>)
 800183a:	6013      	str	r3, [r2, #0]
		if(LED_FLAG > LED_PULSE)
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <loop+0xe0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b0a      	cmp	r3, #10
 8001842:	dd08      	ble.n	8001856 <loop+0xae>
		{
			HAL_GPIO_WritePin(GPIOC, LED_HEARTBEAT_Pin, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <loop+0xdc>)
 800184c:	f002 fd20 	bl	8004290 <HAL_GPIO_WritePin>
			LED_FLAG = 0;
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <loop+0xe0>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
		}


		/* calculate current Speed */
		calculateSpeed();
 8001856:	f000 f9f7 	bl	8001c48 <calculateSpeed>

		/* position Controller */
		positionControl();
 800185a:	f000 f9c7 	bl	8001bec <positionControl>

		/* error handling */
		errorHandling();
 800185e:	f000 fc75 	bl	800214c <errorHandling>
	}

	/* measure the current values */
	measure();
 8001862:	f000 f901 	bl	8001a68 <measure>

	/* speed Controller */
	speedControl();
 8001866:	f000 fa1f 	bl	8001ca8 <speedControl>

	/* current Controller */
	currentControl();
 800186a:	f000 faed 	bl	8001e48 <currentControl>

	/* adjust output Voltages to Bus Voltage */
	voltageAdjust();
 800186e:	f000 fb83 	bl	8001f78 <voltageAdjust>

	/* output PWM  */
	output();
 8001872:	f000 fbd9 	bl	8002028 <output>

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000004c 	.word	0x2000004c
 8001880:	20000050 	.word	0x20000050
 8001884:	40020800 	.word	0x40020800
 8001888:	20000078 	.word	0x20000078
 800188c:	20000070 	.word	0x20000070
 8001890:	2000002c 	.word	0x2000002c
 8001894:	20000030 	.word	0x20000030
 8001898:	fffff448 	.word	0xfffff448
 800189c:	00000000 	.word	0x00000000

080018a0 <initializePeripherals>:

void initializePeripherals(void)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0

	/* Calculate SIN and COS Lookup */
	for( int i = 0; i < MICROSTEPPING_STEPS; i ++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e05c      	b.n	8001966 <initializePeripherals+0xc6>
	{
		sinLookup[i] = sin( ( (double) i / (double) MICROSTEPPING_STEPS ) * 2 * M_PI );
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7fe fddd 	bl	800046c <__aeabi_i2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <initializePeripherals+0x170>)
 80018b8:	f7fe ff6c 	bl	8000794 <__aeabi_ddiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	f7fe fc84 	bl	80001d4 <__adddf3>
 80018cc:	4603      	mov	r3, r0
 80018ce:	460c      	mov	r4, r1
 80018d0:	4618      	mov	r0, r3
 80018d2:	4621      	mov	r1, r4
 80018d4:	a34c      	add	r3, pc, #304	; (adr r3, 8001a08 <initializePeripherals+0x168>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe31 	bl	8000540 <__aeabi_dmul>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	ec44 3b17 	vmov	d7, r3, r4
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	eef0 0a67 	vmov.f32	s1, s15
 80018ee:	f004 f8a7 	bl	8005a40 <sin>
 80018f2:	eeb0 7a40 	vmov.f32	s14, s0
 80018f6:	eef0 7a60 	vmov.f32	s15, s1
 80018fa:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <initializePeripherals+0x174>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	ed83 7b00 	vstr	d7, [r3]
		cosLookup[i] = cos( ( (double) i / (double) MICROSTEPPING_STEPS ) * 2 * M_PI );
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fdb0 	bl	800046c <__aeabi_i2d>
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <initializePeripherals+0x170>)
 8001912:	f7fe ff3f 	bl	8000794 <__aeabi_ddiv>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	f7fe fc57 	bl	80001d4 <__adddf3>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	a336      	add	r3, pc, #216	; (adr r3, 8001a08 <initializePeripherals+0x168>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe04 	bl	8000540 <__aeabi_dmul>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	ec44 3b17 	vmov	d7, r3, r4
 8001940:	eeb0 0a47 	vmov.f32	s0, s14
 8001944:	eef0 0a67 	vmov.f32	s1, s15
 8001948:	f004 f836 	bl	80059b8 <cos>
 800194c:	eeb0 7a40 	vmov.f32	s14, s0
 8001950:	eef0 7a60 	vmov.f32	s15, s1
 8001954:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <initializePeripherals+0x178>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	ed83 7b00 	vstr	d7, [r3]
	for( int i = 0; i < MICROSTEPPING_STEPS; i ++)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	db9e      	blt.n	80018ac <initializePeripherals+0xc>
	}

	/* read initial states of GPIO */
	CURRENT_FAULT = HAL_GPIO_ReadPin(GPIOC, NFAULT_Pin);
 800196e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001972:	482a      	ldr	r0, [pc, #168]	; (8001a1c <initializePeripherals+0x17c>)
 8001974:	f002 fc74 	bl	8004260 <HAL_GPIO_ReadPin>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <initializePeripherals+0x180>)
 800197e:	601a      	str	r2, [r3, #0]
	TEMP_FAULT = HAL_GPIO_ReadPin(GPIOC, NOTW_Pin);
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	4826      	ldr	r0, [pc, #152]	; (8001a1c <initializePeripherals+0x17c>)
 8001984:	f002 fc6c 	bl	8004260 <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <initializePeripherals+0x184>)
 800198e:	601a      	str	r2, [r3, #0]
	BRAKE_MON = HAL_GPIO_ReadPin(BRAKE_MON_GPIO_Port, BRAKE_MON_Pin);
 8001990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001994:	4824      	ldr	r0, [pc, #144]	; (8001a28 <initializePeripherals+0x188>)
 8001996:	f002 fc63 	bl	8004260 <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <initializePeripherals+0x18c>)
 80019a0:	601a      	str	r2, [r3, #0]
	STO_IN = HAL_GPIO_ReadPin(STO_IN_GPIO_Port, STO_IN_Pin);
 80019a2:	2104      	movs	r1, #4
 80019a4:	481d      	ldr	r0, [pc, #116]	; (8001a1c <initializePeripherals+0x17c>)
 80019a6:	f002 fc5b 	bl	8004260 <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <initializePeripherals+0x190>)
 80019b0:	601a      	str	r2, [r3, #0]

	/* ADCs */
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3Buffer, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	491f      	ldr	r1, [pc, #124]	; (8001a34 <initializePeripherals+0x194>)
 80019b6:	4820      	ldr	r0, [pc, #128]	; (8001a38 <initializePeripherals+0x198>)
 80019b8:	f001 f9bc 	bl	8002d34 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1Buffer, 3);
 80019bc:	2203      	movs	r2, #3
 80019be:	491f      	ldr	r1, [pc, #124]	; (8001a3c <initializePeripherals+0x19c>)
 80019c0:	481f      	ldr	r0, [pc, #124]	; (8001a40 <initializePeripherals+0x1a0>)
 80019c2:	f001 f9b7 	bl	8002d34 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2Buffer, 2);
 80019c6:	2202      	movs	r2, #2
 80019c8:	491e      	ldr	r1, [pc, #120]	; (8001a44 <initializePeripherals+0x1a4>)
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <initializePeripherals+0x1a8>)
 80019cc:	f001 f9b2 	bl	8002d34 <HAL_ADC_Start_DMA>

	/* Timers */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019d0:	2100      	movs	r1, #0
 80019d2:	481e      	ldr	r0, [pc, #120]	; (8001a4c <initializePeripherals+0x1ac>)
 80019d4:	f003 f96c 	bl	8004cb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019d8:	2100      	movs	r1, #0
 80019da:	481d      	ldr	r0, [pc, #116]	; (8001a50 <initializePeripherals+0x1b0>)
 80019dc:	f003 f968 	bl	8004cb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	481c      	ldr	r0, [pc, #112]	; (8001a54 <initializePeripherals+0x1b4>)
 80019e4:	f003 f964 	bl	8004cb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019e8:	2100      	movs	r1, #0
 80019ea:	481b      	ldr	r0, [pc, #108]	; (8001a58 <initializePeripherals+0x1b8>)
 80019ec:	f003 f960 	bl	8004cb0 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 80019f0:	213c      	movs	r1, #60	; 0x3c
 80019f2:	481a      	ldr	r0, [pc, #104]	; (8001a5c <initializePeripherals+0x1bc>)
 80019f4:	f003 fa2c 	bl	8004e50 <HAL_TIM_Encoder_Start>

	/* Start timer for loop triggering */
	HAL_TIM_Base_Start_IT(&htim8);
 80019f8:	4819      	ldr	r0, [pc, #100]	; (8001a60 <initializePeripherals+0x1c0>)
 80019fa:	f003 f90a 	bl	8004c12 <HAL_TIM_Base_Start_IT>

}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	54442d18 	.word	0x54442d18
 8001a0c:	400921fb 	.word	0x400921fb
 8001a10:	40900000 	.word	0x40900000
 8001a14:	200002c8 	.word	0x200002c8
 8001a18:	200022e8 	.word	0x200022e8
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	20000060 	.word	0x20000060
 8001a24:	20000068 	.word	0x20000068
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	2000006c 	.word	0x2000006c
 8001a30:	20000074 	.word	0x20000074
 8001a34:	20004300 	.word	0x20004300
 8001a38:	2000016c 	.word	0x2000016c
 8001a3c:	20004304 	.word	0x20004304
 8001a40:	20000124 	.word	0x20000124
 8001a44:	200042e8 	.word	0x200042e8
 8001a48:	2000007c 	.word	0x2000007c
 8001a4c:	2000444c 	.word	0x2000444c
 8001a50:	2000448c 	.word	0x2000448c
 8001a54:	2000440c 	.word	0x2000440c
 8001a58:	2000438c 	.word	0x2000438c
 8001a5c:	200043cc 	.word	0x200043cc
 8001a60:	2000434c 	.word	0x2000434c
 8001a64:	00000000 	.word	0x00000000

08001a68 <measure>:

void measure(void)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
	encoderPosition = TIM5->CNT;
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <measure+0x158>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <measure+0x15c>)
 8001a76:	601a      	str	r2, [r3, #0]

	uint32_t rawBusVoltage = ADC3Buffer[0];
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <measure+0x160>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]

	int rawCurrent1 = ADC1Buffer[0];
 8001a7e:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <measure+0x164>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
	int rawCurrent2 = ADC2Buffer[0];
 8001a84:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <measure+0x168>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]

	int rawRefCurrent1 = ADC1Buffer[1];
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <measure+0x164>)
 8001a8c:	885b      	ldrh	r3, [r3, #2]
 8001a8e:	60bb      	str	r3, [r7, #8]
	int rawRefCurrent2 = ADC2Buffer[1];
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <measure+0x168>)
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	607b      	str	r3, [r7, #4]

	current[0] = ( ( (double)(rawCurrent1 - rawRefCurrent1) * (3300.0 / 4096.0) ) / CURRENT_SENSE_AMP ) / 0.01;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fce5 	bl	800046c <__aeabi_i2d>
 8001aa2:	a341      	add	r3, pc, #260	; (adr r3, 8001ba8 <measure+0x140>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fd4a 	bl	8000540 <__aeabi_dmul>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <measure+0x16c>)
 8001aba:	f7fe fe6b 	bl	8000794 <__aeabi_ddiv>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	a33a      	add	r3, pc, #232	; (adr r3, 8001bb0 <measure+0x148>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fe62 	bl	8000794 <__aeabi_ddiv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	f7fe ffcc 	bl	8000a74 <__aeabi_d2iz>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <measure+0x170>)
 8001ae0:	601a      	str	r2, [r3, #0]
	current[1] = ( ( (double)(rawCurrent2 - rawRefCurrent2) * (3300.0 / 4096.0) ) / CURRENT_SENSE_AMP ) / 0.01;
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fcbf 	bl	800046c <__aeabi_i2d>
 8001aee:	a32e      	add	r3, pc, #184	; (adr r3, 8001ba8 <measure+0x140>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd24 	bl	8000540 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4618      	mov	r0, r3
 8001afe:	4621      	mov	r1, r4
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <measure+0x16c>)
 8001b06:	f7fe fe45 	bl	8000794 <__aeabi_ddiv>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4621      	mov	r1, r4
 8001b12:	a327      	add	r3, pc, #156	; (adr r3, 8001bb0 <measure+0x148>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fe3c 	bl	8000794 <__aeabi_ddiv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7fe ffa6 	bl	8000a74 <__aeabi_d2iz>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <measure+0x170>)
 8001b2c:	605a      	str	r2, [r3, #4]

	busVoltage = ( rawBusVoltage * (3.3 / 4096.0) ) * VOLTAGE_SENSE_DIVIDER * 1000; //unit mV
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7fe fc8c 	bl	800044c <__aeabi_ui2d>
 8001b34:	a320      	add	r3, pc, #128	; (adr r3, 8001bb8 <measure+0x150>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fd01 	bl	8000540 <__aeabi_dmul>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	4618      	mov	r0, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <measure+0x174>)
 8001b4c:	f7fe fcf8 	bl	8000540 <__aeabi_dmul>
 8001b50:	4603      	mov	r3, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	4618      	mov	r0, r3
 8001b56:	4621      	mov	r1, r4
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <measure+0x178>)
 8001b5e:	f7fe fcef 	bl	8000540 <__aeabi_dmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	4618      	mov	r0, r3
 8001b68:	4621      	mov	r1, r4
 8001b6a:	f7fe ff83 	bl	8000a74 <__aeabi_d2iz>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <measure+0x17c>)
 8001b72:	601a      	str	r2, [r3, #0]

	if(busVoltage > 12500 && busVoltage < 26000 )
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <measure+0x17c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	dd09      	ble.n	8001b94 <measure+0x12c>
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <measure+0x17c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f246 528f 	movw	r2, #25999	; 0x658f
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	dc03      	bgt.n	8001b94 <measure+0x12c>
		VOLTAGE_FAULT = 1;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <measure+0x180>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e002      	b.n	8001b9a <measure+0x132>
	else
		VOLTAGE_FAULT = 0;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <measure+0x180>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	3fe9c800 	.word	0x3fe9c800
 8001bb0:	47ae147b 	.word	0x47ae147b
 8001bb4:	3f847ae1 	.word	0x3f847ae1
 8001bb8:	66666666 	.word	0x66666666
 8001bbc:	3f4a6666 	.word	0x3f4a6666
 8001bc0:	40000c00 	.word	0x40000c00
 8001bc4:	20000030 	.word	0x20000030
 8001bc8:	20004300 	.word	0x20004300
 8001bcc:	20004304 	.word	0x20004304
 8001bd0:	200042e8 	.word	0x200042e8
 8001bd4:	40490000 	.word	0x40490000
 8001bd8:	200022d8 	.word	0x200022d8
 8001bdc:	40260000 	.word	0x40260000
 8001be0:	408f4000 	.word	0x408f4000
 8001be4:	20000048 	.word	0x20000048
 8001be8:	20000064 	.word	0x20000064

08001bec <positionControl>:

void positionControl(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
	double posGain = 15;
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	4c0f      	ldr	r4, [pc, #60]	; (8001c34 <positionControl+0x48>)
 8001bf8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double posError = targetPos - encoderPosition;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <positionControl+0x4c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <positionControl+0x50>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc30 	bl	800046c <__aeabi_i2d>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	e9c7 3400 	strd	r3, r4, [r7]

	targetSpeed = posError * posGain;
 8001c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c1c:	f7fe fc90 	bl	8000540 <__aeabi_dmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <positionControl+0x54>)
 8001c26:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	402e0000 	.word	0x402e0000
 8001c38:	2000002c 	.word	0x2000002c
 8001c3c:	20000030 	.word	0x20000030
 8001c40:	20000038 	.word	0x20000038
 8001c44:	00000000 	.word	0x00000000

08001c48 <calculateSpeed>:

void calculateSpeed(void)
{
 8001c48:	b598      	push	{r3, r4, r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	encoderSpeed = encoderPosition - lastEncoderPosition;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <calculateSpeed+0x50>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <calculateSpeed+0x54>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc08 	bl	800046c <__aeabi_i2d>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <calculateSpeed+0x58>)
 8001c62:	e9c2 3400 	strd	r3, r4, [r2]
	encoderSpeed = encoderSpeed / 0.1;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <calculateSpeed+0x58>)
 8001c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c6c:	a308      	add	r3, pc, #32	; (adr r3, 8001c90 <calculateSpeed+0x48>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fd8f 	bl	8000794 <__aeabi_ddiv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <calculateSpeed+0x58>)
 8001c7c:	e9c2 3400 	strd	r3, r4, [r2]

	lastEncoderPosition = encoderPosition;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <calculateSpeed+0x50>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <calculateSpeed+0x54>)
 8001c86:	6013      	str	r3, [r2, #0]

}
 8001c88:	bf00      	nop
 8001c8a:	bd98      	pop	{r3, r4, r7, pc}
 8001c8c:	f3af 8000 	nop.w
 8001c90:	9999999a 	.word	0x9999999a
 8001c94:	3fb99999 	.word	0x3fb99999
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	20000034 	.word	0x20000034
 8001ca0:	20000040 	.word	0x20000040
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <speedControl>:


void speedControl(void)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
	if(targetSpeed > SPEED_MAX)
 8001cae:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <speedControl+0x180>)
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	a354      	add	r3, pc, #336	; (adr r3, 8001e08 <speedControl+0x160>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fed1 	bl	8000a60 <__aeabi_dcmpgt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <speedControl+0x28>
		targetSpeed = SPEED_MAX;
 8001cc4:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <speedControl+0x180>)
 8001cc6:	a450      	add	r4, pc, #320	; (adr r4, 8001e08 <speedControl+0x160>)
 8001cc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ccc:	e9c2 3400 	strd	r3, r4, [r2]

	if(targetSpeed < - SPEED_MAX)
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <speedControl+0x180>)
 8001cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd6:	a34e      	add	r3, pc, #312	; (adr r3, 8001e10 <speedControl+0x168>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fea2 	bl	8000a24 <__aeabi_dcmplt>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <speedControl+0x4a>
		targetSpeed = - SPEED_MAX;
 8001ce6:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <speedControl+0x180>)
 8001ce8:	a449      	add	r4, pc, #292	; (adr r4, 8001e10 <speedControl+0x168>)
 8001cea:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cee:	e9c2 3400 	strd	r3, r4, [r2]

	double speedGain = 0.002;
 8001cf2:	a449      	add	r4, pc, #292	; (adr r4, 8001e18 <speedControl+0x170>)
 8001cf4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cf8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double speedError = targetSpeed - encoderSpeed;
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <speedControl+0x180>)
 8001cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <speedControl+0x184>)
 8001d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f7fe fa60 	bl	80001d0 <__aeabi_dsub>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	e9c7 3400 	strd	r3, r4, [r7]

	targetCurrent[0] = cosLookup[ (int)waveFormCounter ] * CURRENT_LIMIT;
 8001d18:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <speedControl+0x188>)
 8001d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	f7fe fea7 	bl	8000a74 <__aeabi_d2iz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <speedControl+0x18c>)
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d32:	a33b      	add	r3, pc, #236	; (adr r3, 8001e20 <speedControl+0x178>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc02 	bl	8000540 <__aeabi_dmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4618      	mov	r0, r3
 8001d42:	4621      	mov	r1, r4
 8001d44:	f7fe fe96 	bl	8000a74 <__aeabi_d2iz>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <speedControl+0x190>)
 8001d4c:	601a      	str	r2, [r3, #0]
	targetCurrent[1] = sinLookup[ (int)waveFormCounter ] * CURRENT_LIMIT;
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <speedControl+0x188>)
 8001d50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	4621      	mov	r1, r4
 8001d58:	f7fe fe8c 	bl	8000a74 <__aeabi_d2iz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a37      	ldr	r2, [pc, #220]	; (8001e3c <speedControl+0x194>)
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d68:	a32d      	add	r3, pc, #180	; (adr r3, 8001e20 <speedControl+0x178>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fbe7 	bl	8000540 <__aeabi_dmul>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4618      	mov	r0, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	f7fe fe7b 	bl	8000a74 <__aeabi_d2iz>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <speedControl+0x190>)
 8001d82:	605a      	str	r2, [r3, #4]


	waveFormCounter += speedError * speedGain;
 8001d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d8c:	f7fe fbd8 	bl	8000540 <__aeabi_dmul>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4618      	mov	r0, r3
 8001d96:	4621      	mov	r1, r4
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <speedControl+0x188>)
 8001d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fa17 	bl	80001d4 <__adddf3>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <speedControl+0x188>)
 8001dac:	e9c2 3400 	strd	r3, r4, [r2]
	if( waveFormCounter >= MICROSTEPPING_STEPS)
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <speedControl+0x188>)
 8001db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <speedControl+0x198>)
 8001dbc:	f7fe fe46 	bl	8000a4c <__aeabi_dcmpge>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <speedControl+0x12c>
		waveFormCounter = 0;
 8001dc6:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <speedControl+0x188>)
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	e9c2 3400 	strd	r3, r4, [r2]
	if( waveFormCounter < 0)
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <speedControl+0x188>)
 8001dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f7fe fe1f 	bl	8000a24 <__aeabi_dcmplt>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d100      	bne.n	8001dee <speedControl+0x146>
			waveFormCounter = MICROSTEPPING_STEPS;
}
 8001dec:	e005      	b.n	8001dfa <speedControl+0x152>
			waveFormCounter = MICROSTEPPING_STEPS;
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <speedControl+0x188>)
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	4c12      	ldr	r4, [pc, #72]	; (8001e40 <speedControl+0x198>)
 8001df6:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40c38800 	.word	0x40c38800
 8001e10:	00000000 	.word	0x00000000
 8001e14:	c0c38800 	.word	0xc0c38800
 8001e18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e1c:	3f60624d 	.word	0x3f60624d
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40977000 	.word	0x40977000
 8001e28:	20000038 	.word	0x20000038
 8001e2c:	20000040 	.word	0x20000040
 8001e30:	20000058 	.word	0x20000058
 8001e34:	200022e8 	.word	0x200022e8
 8001e38:	200022e0 	.word	0x200022e0
 8001e3c:	200002c8 	.word	0x200002c8
 8001e40:	40900000 	.word	0x40900000
 8001e44:	00000000 	.word	0x00000000

08001e48 <currentControl>:

void currentControl(void)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0

	double currentGain = 0.008;
 8001e4e:	a447      	add	r4, pc, #284	; (adr r4, 8001f6c <currentControl+0x124>)
 8001e50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e54:	e9c7 3400 	strd	r3, r4, [r7]
	for(int i = 0; i < 2; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e072      	b.n	8001f44 <currentControl+0xfc>
	{
		currentError[i] = targetCurrent[i] - current[i];
 8001e5e:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <currentControl+0x110>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e66:	493d      	ldr	r1, [pc, #244]	; (8001f5c <currentControl+0x114>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	493b      	ldr	r1, [pc, #236]	; (8001f60 <currentControl+0x118>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		outputSignal[i] = currentGain * (double)currentError[i];
 8001e78:	4a39      	ldr	r2, [pc, #228]	; (8001f60 <currentControl+0x118>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe faf3 	bl	800046c <__aeabi_i2d>
 8001e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e8a:	f7fe fb59 	bl	8000540 <__aeabi_dmul>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460c      	mov	r4, r1
 8001e92:	4934      	ldr	r1, [pc, #208]	; (8001f64 <currentControl+0x11c>)
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	440a      	add	r2, r1
 8001e9a:	e9c2 3400 	strd	r3, r4, [r2]

		if(outputSignal[i] >= 0)
 8001e9e:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <currentControl+0x11c>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f7fe fdcb 	bl	8000a4c <__aeabi_dcmpge>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <currentControl+0xa6>
		{
			targetVoltage[i*2] = 0;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <currentControl+0x120>)
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	441a      	add	r2, r3
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f04f 0400 	mov.w	r4, #0
 8001ece:	e9c2 3400 	strd	r3, r4, [r2]
			targetVoltage[i*2+1] = outputSignal[i];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <currentControl+0x11c>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ee4:	4920      	ldr	r1, [pc, #128]	; (8001f68 <currentControl+0x120>)
 8001ee6:	00d2      	lsls	r2, r2, #3
 8001ee8:	440a      	add	r2, r1
 8001eea:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if(outputSignal[i] < 0)
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <currentControl+0x11c>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	f7fe fd8f 	bl	8000a24 <__aeabi_dcmplt>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <currentControl+0xf6>
		{
			targetVoltage[i*2] = outputSignal[i];
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	005a      	lsls	r2, r3, #1
 8001f10:	4914      	ldr	r1, [pc, #80]	; (8001f64 <currentControl+0x11c>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <currentControl+0x120>)
 8001f1e:	00d2      	lsls	r2, r2, #3
 8001f20:	440a      	add	r2, r1
 8001f22:	e9c2 3400 	strd	r3, r4, [r2]
			targetVoltage[i*2+1] = 0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <currentControl+0x120>)
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	441a      	add	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f04f 0400 	mov.w	r4, #0
 8001f3a:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 0; i < 2; i++)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	dd89      	ble.n	8001e5e <currentControl+0x16>
		}
	}

}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	f3af 8000 	nop.w
 8001f58:	200022e0 	.word	0x200022e0
 8001f5c:	200022d8 	.word	0x200022d8
 8001f60:	200002c0 	.word	0x200002c0
 8001f64:	200042f0 	.word	0x200042f0
 8001f68:	200002a0 	.word	0x200002a0
 8001f6c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f70:	3f80624d 	.word	0x3f80624d
 8001f74:	00000000 	.word	0x00000000

08001f78 <voltageAdjust>:

void voltageAdjust(void)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0

	for(int i = 0; i < 4; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	e03d      	b.n	8002000 <voltageAdjust+0x88>
	{
		pwmPulse[i] = abs( (double)PWM_PULSE_PERIOD *   targetVoltage[i] / ( busVoltage * 0.001 ) );
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <voltageAdjust+0xa0>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <voltageAdjust+0xa4>)
 8001f96:	f7fe fad3 	bl	8000540 <__aeabi_dmul>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	4625      	mov	r5, r4
 8001fa0:	461c      	mov	r4, r3
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <voltageAdjust+0xa8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa60 	bl	800046c <__aeabi_i2d>
 8001fac:	a318      	add	r3, pc, #96	; (adr r3, 8002010 <voltageAdjust+0x98>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fac5 	bl	8000540 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe fbe9 	bl	8000794 <__aeabi_ddiv>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4621      	mov	r1, r4
 8001fca:	f7fe fd53 	bl	8000a74 <__aeabi_d2iz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bfb8      	it	lt
 8001fd4:	425b      	neglt	r3, r3
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <voltageAdjust+0xac>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if(pwmPulse[i] > PWM_PULSE_PERIOD)
 8001fe0:	4a10      	ldr	r2, [pc, #64]	; (8002024 <voltageAdjust+0xac>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001fec:	d905      	bls.n	8001ffa <voltageAdjust+0x82>
			pwmPulse[i] = PWM_PULSE_PERIOD;
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <voltageAdjust+0xac>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f44f 7152 	mov.w	r1, #840	; 0x348
 8001ff6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 4; i++)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	ddbe      	ble.n	8001f84 <voltageAdjust+0xc>
	}

}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	d2f1a9fc 	.word	0xd2f1a9fc
 8002014:	3f50624d 	.word	0x3f50624d
 8002018:	200002a0 	.word	0x200002a0
 800201c:	408a4000 	.word	0x408a4000
 8002020:	20000048 	.word	0x20000048
 8002024:	200022c8 	.word	0x200022c8

08002028 <output>:

void output(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	/* set the reset pins high according to the pwm Command values */
	if( ( pwmPulse[0] >= 0 || pwmPulse[1] >= 0) && ERROR_FLAG == 0 )
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <output+0x74>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d106      	bne.n	8002042 <output+0x1a>
	{
		HAL_GPIO_WritePin(GPIOB, NRST_CD_Pin|NRST_AB_Pin, GPIO_PIN_SET);
 8002034:	2201      	movs	r2, #1
 8002036:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800203a:	4819      	ldr	r0, [pc, #100]	; (80020a0 <output+0x78>)
 800203c:	f002 f928 	bl	8004290 <HAL_GPIO_WritePin>
 8002040:	e005      	b.n	800204e <output+0x26>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, NRST_CD_Pin|NRST_AB_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002048:	4815      	ldr	r0, [pc, #84]	; (80020a0 <output+0x78>)
 800204a:	f002 f921 	bl	8004290 <HAL_GPIO_WritePin>
	}

	if( ( pwmPulse[2] >= 0 || pwmPulse[3] >= 0) && ERROR_FLAG == 0 )
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <output+0x74>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <output+0x3c>
	{
		HAL_GPIO_WritePin(GPIOB, NRST_CD_Pin|NRST_AB_Pin, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <output+0x78>)
 800205e:	f002 f917 	bl	8004290 <HAL_GPIO_WritePin>
 8002062:	e005      	b.n	8002070 <output+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, NRST_CD_Pin|NRST_AB_Pin, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <output+0x78>)
 800206c:	f002 f910 	bl	8004290 <HAL_GPIO_WritePin>
	}

	/* set the pulse values of the individual PWM outputs */

	//PWM C matches TIMER 1
	htim1.Instance->CCR1 = pwmPulse[2];
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <output+0x7c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <output+0x80>)
 8002076:	6892      	ldr	r2, [r2, #8]
 8002078:	635a      	str	r2, [r3, #52]	; 0x34

	//PWM A matches TIMER 2
	htim2.Instance->CCR1 = pwmPulse[0];
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <output+0x84>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <output+0x80>)
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	635a      	str	r2, [r3, #52]	; 0x34

	//PWM B matches TIMER 3
	htim3.Instance->CCR1 = pwmPulse[1];
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <output+0x88>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <output+0x80>)
 800208a:	6852      	ldr	r2, [r2, #4]
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

	//PWM D matches TIMER 4
	htim4.Instance->CCR1 = pwmPulse[3];
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <output+0x8c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <output+0x80>)
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000070 	.word	0x20000070
 80020a0:	40020400 	.word	0x40020400
 80020a4:	2000444c 	.word	0x2000444c
 80020a8:	200022c8 	.word	0x200022c8
 80020ac:	2000448c 	.word	0x2000448c
 80020b0:	2000440c 	.word	0x2000440c
 80020b4:	2000438c 	.word	0x2000438c

080020b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
	switch ( GPIO_Pin )
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d015      	beq.n	80020f4 <HAL_GPIO_EXTI_Callback+0x3c>
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	dc02      	bgt.n	80020d2 <HAL_GPIO_EXTI_Callback+0x1a>
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d024      	beq.n	800211a <HAL_GPIO_EXTI_Callback+0x62>
		case STO_IN_Pin:
			STO_IN = HAL_GPIO_ReadPin(STO_IN_GPIO_Port, STO_IN_Pin);
			break;
	}

}
 80020d0:	e02c      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x74>
	switch ( GPIO_Pin )
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_EXTI_Callback+0x28>
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_EXTI_Callback+0x4e>
}
 80020de:	e025      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x74>
			CURRENT_FAULT = HAL_GPIO_ReadPin(GPIOC, NFAULT_Pin);
 80020e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <HAL_GPIO_EXTI_Callback+0x7c>)
 80020e6:	f002 f8bb 	bl	8004260 <HAL_GPIO_ReadPin>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_GPIO_EXTI_Callback+0x80>)
 80020f0:	601a      	str	r2, [r3, #0]
			break;
 80020f2:	e01b      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x74>
			TEMP_FAULT = HAL_GPIO_ReadPin(GPIOC, NOTW_Pin);
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <HAL_GPIO_EXTI_Callback+0x7c>)
 80020f8:	f002 f8b2 	bl	8004260 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_GPIO_EXTI_Callback+0x84>)
 8002102:	601a      	str	r2, [r3, #0]
			break;
 8002104:	e012      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x74>
			BRAKE_MON = HAL_GPIO_ReadPin(BRAKE_MON_GPIO_Port, BRAKE_MON_Pin);
 8002106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <HAL_GPIO_EXTI_Callback+0x88>)
 800210c:	f002 f8a8 	bl	8004260 <HAL_GPIO_ReadPin>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002116:	601a      	str	r2, [r3, #0]
			break;
 8002118:	e008      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x74>
			STO_IN = HAL_GPIO_ReadPin(STO_IN_GPIO_Port, STO_IN_Pin);
 800211a:	2104      	movs	r1, #4
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_GPIO_EXTI_Callback+0x7c>)
 800211e:	f002 f89f 	bl	8004260 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_GPIO_EXTI_Callback+0x90>)
 8002128:	601a      	str	r2, [r3, #0]
			break;
 800212a:	bf00      	nop
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020800 	.word	0x40020800
 8002138:	20000060 	.word	0x20000060
 800213c:	20000068 	.word	0x20000068
 8002140:	40020000 	.word	0x40020000
 8002144:	2000006c 	.word	0x2000006c
 8002148:	20000074 	.word	0x20000074

0800214c <errorHandling>:


void errorHandling(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	if( CURRENT_FAULT == 0 || TEMP_FAULT == 0 || STO_IN == 0 || VOLTAGE_FAULT == 0)
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <errorHandling+0x50>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <errorHandling+0x24>
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <errorHandling+0x54>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <errorHandling+0x24>
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <errorHandling+0x58>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <errorHandling+0x24>
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <errorHandling+0x5c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <errorHandling+0x38>
	{
		ERROR_FLAG = 1;
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <errorHandling+0x60>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <errorHandling+0x64>)
 800217e:	f002 f887 	bl	8004290 <HAL_GPIO_WritePin>
 8002182:	e008      	b.n	8002196 <errorHandling+0x4a>
	}
	else
	{
		ERROR_FLAG = 0;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <errorHandling+0x60>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <errorHandling+0x64>)
 8002192:	f002 f87d 	bl	8004290 <HAL_GPIO_WritePin>
	}
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000060 	.word	0x20000060
 80021a0:	20000068 	.word	0x20000068
 80021a4:	20000074 	.word	0x20000074
 80021a8:	20000064 	.word	0x20000064
 80021ac:	20000070 	.word	0x20000070
 80021b0:	40020800 	.word	0x40020800

080021b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c6:	f000 fd51 	bl	8002c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM8) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0x24>
	  loop();
 80021d4:	f7ff fae8 	bl	80017a8 <loop>
  }
  /* USER CODE END Callback 1 */
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40001000 	.word	0x40001000
 80021e4:	40010400 	.word	0x40010400

080021e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOC, LED_ERROR_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <Error_Handler+0x14>)
 80021f4:	f002 f84c 	bl	8004290 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40020800 	.word	0x40020800

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_MspInit+0x4c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_MspInit+0x4c>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_MspInit+0x4c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	2036      	movs	r0, #54	; 0x36
 8002266:	f001 fac9 	bl	80037fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800226a:	2036      	movs	r0, #54	; 0x36
 800226c:	f001 fae2 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <HAL_InitTick+0xa4>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_InitTick+0xa4>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_InitTick+0xa4>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800228c:	f107 0210 	add.w	r2, r7, #16
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fc54 	bl	8004b44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800229c:	f002 fc3e 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 80022a0:	4603      	mov	r3, r0
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <HAL_InitTick+0xa8>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	3b01      	subs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_InitTick+0xac>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <HAL_InitTick+0xb0>)
 80022b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_InitTick+0xac>)
 80022bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_InitTick+0xac>)
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <HAL_InitTick+0xac>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_InitTick+0xac>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <HAL_InitTick+0xac>)
 80022d6:	f002 fc67 	bl	8004ba8 <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <HAL_InitTick+0xac>)
 80022e2:	f002 fc96 	bl	8004c12 <HAL_TIM_Base_Start_IT>
 80022e6:	4603      	mov	r3, r0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	431bde83 	.word	0x431bde83
 80022fc:	2000430c 	.word	0x2000430c
 8002300:	40001000 	.word	0x40001000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002366:	2004      	movs	r0, #4
 8002368:	f001 ffac 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002374:	2080      	movs	r0, #128	; 0x80
 8002376:	f001 ffa5 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800237a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800237e:	f001 ffa1 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}

08002386 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800238a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800238e:	f001 ff99 	bl	80042c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800239e:	f002 fd8e 	bl	8004ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000434c 	.word	0x2000434c

080023ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <TIM6_DAC_IRQHandler+0x10>)
 80023b2:	f002 fd84 	bl	8004ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000430c 	.word	0x2000430c

080023c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA2_Stream0_IRQHandler+0x10>)
 80023c6:	f001 fb49 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200001b4 	.word	0x200001b4

080023d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA2_Stream1_IRQHandler+0x10>)
 80023da:	f001 fb3f 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200000c4 	.word	0x200000c4

080023e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA2_Stream2_IRQHandler+0x10>)
 80023ee:	f001 fb35 	bl	8003a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000214 	.word	0x20000214

080023fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <SystemInit+0x28>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <SystemInit+0x28>)
 8002408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <SystemInit+0x28>)
 8002412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002416:	609a      	str	r2, [r3, #8]
#endif
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b092      	sub	sp, #72	; 0x48
 800242c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	615a      	str	r2, [r3, #20]
 800244a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2220      	movs	r2, #32
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f003 faa6 	bl	80059a4 <memset>

  htim1.Instance = TIM1;
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <MX_TIM1_Init+0x100>)
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <MX_TIM1_Init+0x104>)
 800245c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800245e:	4b32      	ldr	r3, [pc, #200]	; (8002528 <MX_TIM1_Init+0x100>)
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	4b30      	ldr	r3, [pc, #192]	; (8002528 <MX_TIM1_Init+0x100>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 840-1;
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <MX_TIM1_Init+0x100>)
 800246c:	f240 3247 	movw	r2, #839	; 0x347
 8002470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <MX_TIM1_Init+0x100>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002478:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <MX_TIM1_Init+0x100>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <MX_TIM1_Init+0x100>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002484:	4828      	ldr	r0, [pc, #160]	; (8002528 <MX_TIM1_Init+0x100>)
 8002486:	f002 fbe8 	bl	8004c5a <HAL_TIM_PWM_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002490:	f7ff feaa 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800249c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a0:	4619      	mov	r1, r3
 80024a2:	4821      	ldr	r0, [pc, #132]	; (8002528 <MX_TIM1_Init+0x100>)
 80024a4:	f003 f978 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80024ae:	f7ff fe9b 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b2:	2360      	movs	r3, #96	; 0x60
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024be:	2300      	movs	r3, #0
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	2200      	movs	r2, #0
 80024d4:	4619      	mov	r1, r3
 80024d6:	4814      	ldr	r0, [pc, #80]	; (8002528 <MX_TIM1_Init+0x100>)
 80024d8:	f002 fdfa 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80024e2:	f7ff fe81 	bl	80021e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <MX_TIM1_Init+0x100>)
 800250a:	f003 f9c1 	bl	8005890 <HAL_TIMEx_ConfigBreakDeadTime>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002514:	f7ff fe68 	bl	80021e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002518:	4803      	ldr	r0, [pc, #12]	; (8002528 <MX_TIM1_Init+0x100>)
 800251a:	f000 faaf 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 800251e:	bf00      	nop
 8002520:	3748      	adds	r7, #72	; 0x48
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000444c 	.word	0x2000444c
 800252c:	40010000 	.word	0x40010000

08002530 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002552:	4b22      	ldr	r3, [pc, #136]	; (80025dc <MX_TIM2_Init+0xac>)
 8002554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <MX_TIM2_Init+0xac>)
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <MX_TIM2_Init+0xac>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <MX_TIM2_Init+0xac>)
 8002568:	f240 3247 	movw	r2, #839	; 0x347
 800256c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <MX_TIM2_Init+0xac>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <MX_TIM2_Init+0xac>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800257a:	4818      	ldr	r0, [pc, #96]	; (80025dc <MX_TIM2_Init+0xac>)
 800257c:	f002 fb6d 	bl	8004c5a <HAL_TIM_PWM_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002586:	f7ff fe2f 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800258a:	2320      	movs	r3, #32
 800258c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	4619      	mov	r1, r3
 8002598:	4810      	ldr	r0, [pc, #64]	; (80025dc <MX_TIM2_Init+0xac>)
 800259a:	f003 f8fd 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80025a4:	f7ff fe20 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a8:	2360      	movs	r3, #96	; 0x60
 80025aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	4619      	mov	r1, r3
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <MX_TIM2_Init+0xac>)
 80025c0:	f002 fd86 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80025ca:	f7ff fe0d 	bl	80021e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80025ce:	4803      	ldr	r0, [pc, #12]	; (80025dc <MX_TIM2_Init+0xac>)
 80025d0:	f000 fa54 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000448c 	.word	0x2000448c

080025e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <MX_TIM3_Init+0xac>)
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <MX_TIM3_Init+0xb0>)
 8002606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <MX_TIM3_Init+0xac>)
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <MX_TIM3_Init+0xac>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM3_Init+0xac>)
 8002616:	f240 3247 	movw	r2, #839	; 0x347
 800261a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_TIM3_Init+0xac>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM3_Init+0xac>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002628:	4818      	ldr	r0, [pc, #96]	; (800268c <MX_TIM3_Init+0xac>)
 800262a:	f002 fb16 	bl	8004c5a <HAL_TIM_PWM_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002634:	f7ff fdd8 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	4619      	mov	r1, r3
 8002646:	4811      	ldr	r0, [pc, #68]	; (800268c <MX_TIM3_Init+0xac>)
 8002648:	f003 f8a6 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002652:	f7ff fdc9 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002656:	2360      	movs	r3, #96	; 0x60
 8002658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <MX_TIM3_Init+0xac>)
 800266e:	f002 fd2f 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002678:	f7ff fdb6 	bl	80021e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800267c:	4803      	ldr	r0, [pc, #12]	; (800268c <MX_TIM3_Init+0xac>)
 800267e:	f000 f9fd 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000440c 	.word	0x2000440c
 8002690:	40000400 	.word	0x40000400

08002694 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	f107 0320 	add.w	r3, r7, #32
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <MX_TIM4_Init+0xac>)
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <MX_TIM4_Init+0xb0>)
 80026ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MX_TIM4_Init+0xac>)
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_TIM4_Init+0xac>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 840-1;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_TIM4_Init+0xac>)
 80026ca:	f240 3247 	movw	r2, #839	; 0x347
 80026ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <MX_TIM4_Init+0xac>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_TIM4_Init+0xac>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026dc:	4818      	ldr	r0, [pc, #96]	; (8002740 <MX_TIM4_Init+0xac>)
 80026de:	f002 fabc 	bl	8004c5a <HAL_TIM_PWM_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80026e8:	f7ff fd7e 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4619      	mov	r1, r3
 80026fa:	4811      	ldr	r0, [pc, #68]	; (8002740 <MX_TIM4_Init+0xac>)
 80026fc:	f003 f84c 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002706:	f7ff fd6f 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800270a:	2360      	movs	r3, #96	; 0x60
 800270c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	4619      	mov	r1, r3
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <MX_TIM4_Init+0xac>)
 8002722:	f002 fcd5 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800272c:	f7ff fd5c 	bl	80021e8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <MX_TIM4_Init+0xac>)
 8002732:	f000 f9a3 	bl	8002a7c <HAL_TIM_MspPostInit>

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000438c 	.word	0x2000438c
 8002744:	40000800 	.word	0x40000800

08002748 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f924 	bl	80059a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <MX_TIM5_Init+0xa0>)
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <MX_TIM5_Init+0xa4>)
 8002768:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <MX_TIM5_Init+0xa0>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <MX_TIM5_Init+0xa0>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <MX_TIM5_Init+0xa0>)
 8002778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800277c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <MX_TIM5_Init+0xa0>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <MX_TIM5_Init+0xa0>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800278a:	2303      	movs	r3, #3
 800278c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002792:	2301      	movs	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800279a:	2305      	movs	r3, #5
 800279c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027a2:	2301      	movs	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80027aa:	2305      	movs	r3, #5
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <MX_TIM5_Init+0xa0>)
 80027b6:	f002 fab9 	bl	8004d2c <HAL_TIM_Encoder_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80027c0:	f7ff fd12 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_TIM5_Init+0xa0>)
 80027d2:	f002 ffe1 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80027dc:	f7ff fd04 	bl	80021e8 <Error_Handler>
  }

}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	; 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200043cc 	.word	0x200043cc
 80027ec:	40000c00 	.word	0x40000c00

080027f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b092      	sub	sp, #72	; 0x48
 80027f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
 8002810:	615a      	str	r2, [r3, #20]
 8002812:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2220      	movs	r2, #32
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f003 f8c2 	bl	80059a4 <memset>

  htim8.Instance = TIM8;
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <MX_TIM8_Init+0xf8>)
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <MX_TIM8_Init+0xfc>)
 8002824:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <MX_TIM8_Init+0xf8>)
 8002828:	22a7      	movs	r2, #167	; 0xa7
 800282a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <MX_TIM8_Init+0xf8>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <MX_TIM8_Init+0xf8>)
 8002834:	2263      	movs	r2, #99	; 0x63
 8002836:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <MX_TIM8_Init+0xf8>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800283e:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <MX_TIM8_Init+0xf8>)
 8002840:	2200      	movs	r2, #0
 8002842:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <MX_TIM8_Init+0xf8>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800284a:	4827      	ldr	r0, [pc, #156]	; (80028e8 <MX_TIM8_Init+0xf8>)
 800284c:	f002 fa05 	bl	8004c5a <HAL_TIM_PWM_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002856:	f7ff fcc7 	bl	80021e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800285a:	2320      	movs	r3, #32
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002866:	4619      	mov	r1, r3
 8002868:	481f      	ldr	r0, [pc, #124]	; (80028e8 <MX_TIM8_Init+0xf8>)
 800286a:	f002 ff95 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002874:	f7ff fcb8 	bl	80021e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002878:	2360      	movs	r3, #96	; 0x60
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002884:	2300      	movs	r3, #0
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	4812      	ldr	r0, [pc, #72]	; (80028e8 <MX_TIM8_Init+0xf8>)
 800289e:	f002 fc17 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80028a8:	f7ff fc9e 	bl	80021e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <MX_TIM8_Init+0xf8>)
 80028d0:	f002 ffde 	bl	8005890 <HAL_TIMEx_ConfigBreakDeadTime>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80028da:	f7ff fc85 	bl	80021e8 <Error_Handler>
  }

}
 80028de:	bf00      	nop
 80028e0:	3748      	adds	r7, #72	; 0x48
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000434c 	.word	0x2000434c
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a36      	ldr	r2, [pc, #216]	; (80029d8 <HAL_TIM_PWM_MspInit+0xe8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	4b35      	ldr	r3, [pc, #212]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800291e:	e056      	b.n	80029ce <HAL_TIM_PWM_MspInit+0xde>
  else if(tim_pwmHandle->Instance==TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	e042      	b.n	80029ce <HAL_TIM_PWM_MspInit+0xde>
  else if(tim_pwmHandle->Instance==TIM3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_TIM_PWM_MspInit+0xf0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
}
 800296e:	e02e      	b.n	80029ce <HAL_TIM_PWM_MspInit+0xde>
  else if(tim_pwmHandle->Instance==TIM4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIM_PWM_MspInit+0xf4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
}
 8002996:	e01a      	b.n	80029ce <HAL_TIM_PWM_MspInit+0xde>
  else if(tim_pwmHandle->Instance==TIM8)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <HAL_TIM_PWM_MspInit+0xf8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d115      	bne.n	80029ce <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_TIM_PWM_MspInit+0xec>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	f000 ff1a 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	f000 ff33 	bl	8003834 <HAL_NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_TIM_Encoder_MspInit+0x84>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12b      	bne.n	8002a66 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a18:	f043 0308 	orr.w	r3, r3, #8
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002a46:	2303      	movs	r3, #3
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a56:	2302      	movs	r3, #2
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002a62:	f001 fa63 	bl	8003f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_TIM_MspPostInit+0x140>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11f      	bne.n	8002ade <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a46      	ldr	r2, [pc, #280]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_C_Pin;
 8002aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_C_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	483b      	ldr	r0, [pc, #236]	; (8002bc4 <HAL_TIM_MspPostInit+0x148>)
 8002ad8:	f001 fa28 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002adc:	e06a      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d11e      	bne.n	8002b26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_A_Pin;
 8002b04:	2320      	movs	r3, #32
 8002b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b14:	2301      	movs	r3, #1
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_A_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4829      	ldr	r0, [pc, #164]	; (8002bc4 <HAL_TIM_MspPostInit+0x148>)
 8002b20:	f001 fa04 	bl	8003f2c <HAL_GPIO_Init>
}
 8002b24:	e046      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_TIM_MspPostInit+0x14c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d11e      	bne.n	8002b6e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_B_Pin;
 8002b4c:	2340      	movs	r3, #64	; 0x40
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_B_GPIO_Port, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4817      	ldr	r0, [pc, #92]	; (8002bc4 <HAL_TIM_MspPostInit+0x148>)
 8002b68:	f001 f9e0 	bl	8003f2c <HAL_GPIO_Init>
}
 8002b6c:	e022      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_TIM_MspPostInit+0x150>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d11d      	bne.n	8002bb4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_TIM_MspPostInit+0x144>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_D_Pin;
 8002b94:	2340      	movs	r3, #64	; 0x40
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_D_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <HAL_TIM_MspPostInit+0x154>)
 8002bb0:	f001 f9bc 	bl	8003f2c <HAL_GPIO_Init>
}
 8002bb4:	bf00      	nop
 8002bb6:	3730      	adds	r7, #48	; 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bda:	e003      	b.n	8002be4 <LoopCopyDataInit>

08002bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002be2:	3104      	adds	r1, #4

08002be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002be4:	480b      	ldr	r0, [pc, #44]	; (8002c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bec:	d3f6      	bcc.n	8002bdc <CopyDataInit>
  ldr  r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bf0:	e002      	b.n	8002bf8 <LoopFillZerobss>

08002bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bf4:	f842 3b04 	str.w	r3, [r2], #4

08002bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bfc:	d3f9      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfe:	f7ff fbfd 	bl	80023fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c02:	f002 feab 	bl	800595c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c06:	f7fe fd35 	bl	8001674 <main>
  bx  lr    
 8002c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c10:	08006c88 	.word	0x08006c88
  ldr  r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c18:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002c1c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002c20:	200044d0 	.word	0x200044d0

08002c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <ADC_IRQHandler>
	...

08002c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_Init+0x40>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_Init+0x40>)
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_Init+0x40>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f000 fdc8 	bl	80037e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7ff fafa 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5c:	f7ff fad0 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	200044cc 	.word	0x200044cc

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	200044cc 	.word	0x200044cc

08002cac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e033      	b.n	8002d2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f99c 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa4a 	bl	8003198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
 8002d1a:	e001      	b.n	8002d20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Start_DMA+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0cc      	b.n	8002eec <HAL_ADC_Start_DMA+0x1b8>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d018      	beq.n	8002d9a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_ADC_Start_DMA+0x1c0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ef8 <HAL_ADC_Start_DMA+0x1c4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9a      	lsrs	r2, r3, #18
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d8c:	e002      	b.n	8002d94 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f9      	bne.n	8002d8e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 80a0 	bne.w	8002eea <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f023 0206 	bic.w	r2, r3, #6
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
 8002df6:	e002      	b.n	8002dfe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_ADC_Start_DMA+0x1c8>)
 8002e08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HAL_ADC_Start_DMA+0x1cc>)
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <HAL_ADC_Start_DMA+0x1d0>)
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_ADC_Start_DMA+0x1d4>)
 8002e20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	334c      	adds	r3, #76	; 0x4c
 8002e56:	4619      	mov	r1, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f000 fda6 	bl	80039ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12a      	bne.n	8002ec2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_ADC_Start_DMA+0x1d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d015      	beq.n	8002ea2 <HAL_ADC_Start_DMA+0x16e>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <HAL_ADC_Start_DMA+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_Start_DMA+0x158>
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_ADC_Start_DMA+0x1c8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_ADC_Start_DMA+0x1e0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d129      	bne.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
 8002e96:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_ADC_Start_DMA+0x1c8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d823      	bhi.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11c      	bne.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e013      	b.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_ADC_Start_DMA+0x1d8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10e      	bne.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d107      	bne.n	8002eea <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	40012300 	.word	0x40012300
 8002f00:	08003391 	.word	0x08003391
 8002f04:	0800344b 	.word	0x0800344b
 8002f08:	08003467 	.word	0x08003467
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	40012100 	.word	0x40012100
 8002f14:	40012200 	.word	0x40012200

08002f18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e105      	b.n	800317c <HAL_ADC_ConfigChannel+0x228>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d925      	bls.n	8002fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68d9      	ldr	r1, [r3, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4603      	mov	r3, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3b1e      	subs	r3, #30
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e022      	b.n	8003012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4403      	add	r3, r0
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d824      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b05      	subs	r3, #5
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
 8003062:	e04c      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d824      	bhi.n	80030b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b23      	subs	r3, #35	; 0x23
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43da      	mvns	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	400a      	ands	r2, r1
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b23      	subs	r3, #35	; 0x23
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
 80030b4:	e023      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b41      	subs	r3, #65	; 0x41
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	400a      	ands	r2, r1
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b41      	subs	r3, #65	; 0x41
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_ADC_ConfigChannel+0x234>)
 8003100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b12      	cmp	r3, #18
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d123      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d003      	beq.n	800313a <HAL_ADC_ConfigChannel+0x1e6>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b11      	cmp	r3, #17
 8003138:	d11b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d111      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_ADC_ConfigChannel+0x23c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_ADC_ConfigChannel+0x240>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9a      	lsrs	r2, r3, #18
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003164:	e002      	b.n	800316c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f9      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	40012000 	.word	0x40012000
 8003190:	20000000 	.word	0x20000000
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <ADC_Init+0x1f0>)
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <ADC_Init+0x1f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e00f      	b.n	8003296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0202 	bic.w	r2, r2, #2
 80032a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e1b      	ldrb	r3, [r3, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	3b01      	subs	r3, #1
 80032f0:	035a      	lsls	r2, r3, #13
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e007      	b.n	800330c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	3b01      	subs	r3, #1
 8003328:	051a      	lsls	r2, r3, #20
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334e:	025a      	lsls	r2, r3, #9
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	029a      	lsls	r2, r3, #10
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	0f000001 	.word	0x0f000001

08003390 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d13c      	bne.n	8003424 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d12b      	bne.n	800341c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d127      	bne.n	800341c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d119      	bne.n	800341c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0220 	bic.w	r2, r2, #32
 80033f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fd7b 	bl	8002f18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003422:	e00e      	b.n	8003442 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd85 	bl	8002f40 <HAL_ADC_ErrorCallback>
}
 8003436:	e004      	b.n	8003442 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fd67 	bl	8002f2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fd5a 	bl	8002f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0ed      	b.n	8003682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd ff76 	bl	80013a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0202 	bic.w	r2, r2, #2
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7ff fbe4 	bl	8002c94 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ce:	e012      	b.n	80034f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034d0:	f7ff fbe0 	bl	8002c94 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b0a      	cmp	r3, #10
 80034dc:	d90b      	bls.n	80034f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0c5      	b.n	8003682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7ff fbbe 	bl	8002c94 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800351a:	e012      	b.n	8003542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800351c:	f7ff fbba 	bl	8002c94 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b0a      	cmp	r3, #10
 8003528:	d90b      	bls.n	8003542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2205      	movs	r2, #5
 800353a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e09f      	b.n	8003682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0e5      	beq.n	800351c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e007      	b.n	800357a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7e5b      	ldrb	r3, [r3, #25]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d108      	bne.n	8003594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7e9b      	ldrb	r3, [r3, #26]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0220 	orr.w	r2, r2, #32
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e007      	b.n	80035ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0220 	bic.w	r2, r2, #32
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7edb      	ldrb	r3, [r3, #27]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0210 	bic.w	r2, r2, #16
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e007      	b.n	80035f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0210 	orr.w	r2, r2, #16
 80035f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7f1b      	ldrb	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0208 	orr.w	r2, r2, #8
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e007      	b.n	8003622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7f5b      	ldrb	r3, [r3, #29]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0204 	orr.w	r2, r2, #4
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	ea42 0103 	orr.w	r1, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff4c 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380e:	f7ff ff61 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7ff ffb1 	bl	8003780 <NVIC_EncodePriority>
 800381e:	4602      	mov	r2, r0
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff80 	bl	800372c <__NVIC_SetPriority>
}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff54 	bl	80036f0 <__NVIC_EnableIRQ>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7ff fa1a 	bl	8002c94 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e099      	b.n	80039a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800388c:	e00f      	b.n	80038ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800388e:	f7ff fa01 	bl	8002c94 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b05      	cmp	r3, #5
 800389a:	d908      	bls.n	80038ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e078      	b.n	80039a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e8      	bne.n	800388e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_DMA_Init+0x158>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b04      	cmp	r3, #4
 8003906:	d107      	bne.n	8003918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	4313      	orrs	r3, r2
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0307 	bic.w	r3, r3, #7
 800392e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2b04      	cmp	r3, #4
 8003940:	d117      	bne.n	8003972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fa6f 	bl	8003e38 <DMA_CheckFifoParam>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800396e:	2301      	movs	r3, #1
 8003970:	e016      	b.n	80039a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa26 	bl	8003dcc <DMA_CalcBaseAndBitshift>
 8003980:	4603      	mov	r3, r0
 8003982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	223f      	movs	r2, #63	; 0x3f
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	f010803f 	.word	0xf010803f

080039ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_DMA_Start_IT+0x26>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e040      	b.n	8003a54 <HAL_DMA_Start_IT+0xa8>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d12f      	bne.n	8003a46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f9b8 	bl	8003d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	223f      	movs	r2, #63	; 0x3f
 8003a06:	409a      	lsls	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0216 	orr.w	r2, r2, #22
 8003a1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e005      	b.n	8003a52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a68:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_DMA_IRQHandler+0x258>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a92      	ldr	r2, [pc, #584]	; (8003cb8 <HAL_DMA_IRQHandler+0x25c>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01a      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d012      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2204      	movs	r2, #4
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2204      	movs	r2, #4
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2210      	movs	r2, #16
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d043      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d03c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	2210      	movs	r2, #16
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d024      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
 8003b8a:	e01f      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e016      	b.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0208 	bic.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 808e 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8086 	beq.w	8003cfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d136      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0216 	bic.w	r2, r2, #22
 8003c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x1da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	223f      	movs	r2, #63	; 0x3f
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d07d      	beq.n	8003d66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
        }
        return;
 8003c72:	e078      	b.n	8003d66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01c      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d030      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
 8003ca0:	e02b      	b.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e022      	b.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d032      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d022      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2205      	movs	r2, #5
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d307      	bcc.n	8003d42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f2      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x2ca>
 8003d40:	e000      	b.n	8003d44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d66:	bf00      	nop
    }
  }
}
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d108      	bne.n	8003db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dae:	e007      	b.n	8003dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3b10      	subs	r3, #16
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <DMA_CalcBaseAndBitshift+0x64>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <DMA_CalcBaseAndBitshift+0x68>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d909      	bls.n	8003e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	1d1a      	adds	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e0c:	e007      	b.n	8003e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	aaaaaaab 	.word	0xaaaaaaab
 8003e34:	08006a98 	.word	0x08006a98

08003e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11f      	bne.n	8003e92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d855      	bhi.n	8003f04 <DMA_CheckFifoParam+0xcc>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <DMA_CheckFifoParam+0x28>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e83 	.word	0x08003e83
 8003e68:	08003e71 	.word	0x08003e71
 8003e6c:	08003f05 	.word	0x08003f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d045      	beq.n	8003f08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e80:	e042      	b.n	8003f08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e8a:	d13f      	bne.n	8003f0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e90:	e03c      	b.n	8003f0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	d121      	bne.n	8003ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d836      	bhi.n	8003f10 <DMA_CheckFifoParam+0xd8>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <DMA_CheckFifoParam+0x70>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ebf 	.word	0x08003ebf
 8003eb0:	08003eb9 	.word	0x08003eb9
 8003eb4:	08003ed1 	.word	0x08003ed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e02f      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d024      	beq.n	8003f14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ece:	e021      	b.n	8003f14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed8:	d11e      	bne.n	8003f18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ede:	e01b      	b.n	8003f18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d902      	bls.n	8003eec <DMA_CheckFifoParam+0xb4>
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d003      	beq.n	8003ef2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eea:	e018      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e015      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00e      	beq.n	8003f1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      break;
 8003f02:	e00b      	b.n	8003f1c <DMA_CheckFifoParam+0xe4>
      break;
 8003f04:	bf00      	nop
 8003f06:	e00a      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f08:	bf00      	nop
 8003f0a:	e008      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f0c:	bf00      	nop
 8003f0e:	e006      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f10:	bf00      	nop
 8003f12:	e004      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f14:	bf00      	nop
 8003f16:	e002      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;   
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <DMA_CheckFifoParam+0xe6>
      break;
 8003f1c:	bf00      	nop
    }
  } 
  
  return status; 
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e16b      	b.n	8004220 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f040 815a 	bne.w	800421a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d00b      	beq.n	8003f86 <HAL_GPIO_Init+0x5a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d007      	beq.n	8003f86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f7a:	2b11      	cmp	r3, #17
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b12      	cmp	r3, #18
 8003f84:	d130      	bne.n	8003fe8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	2203      	movs	r2, #3
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0201 	and.w	r2, r3, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0xfc>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b12      	cmp	r3, #18
 8004026:	d123      	bne.n	8004070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	08da      	lsrs	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3208      	adds	r2, #8
 8004030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	220f      	movs	r2, #15
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	08da      	lsrs	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3208      	adds	r2, #8
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0203 	and.w	r2, r3, #3
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80b4 	beq.w	800421a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_GPIO_Init+0x308>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_GPIO_Init+0x308>)
 80040bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c0:	6453      	str	r3, [r2, #68]	; 0x44
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_GPIO_Init+0x308>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ce:	4a5a      	ldr	r2, [pc, #360]	; (8004238 <HAL_GPIO_Init+0x30c>)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a51      	ldr	r2, [pc, #324]	; (800423c <HAL_GPIO_Init+0x310>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02b      	beq.n	8004152 <HAL_GPIO_Init+0x226>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a50      	ldr	r2, [pc, #320]	; (8004240 <HAL_GPIO_Init+0x314>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d025      	beq.n	800414e <HAL_GPIO_Init+0x222>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a4f      	ldr	r2, [pc, #316]	; (8004244 <HAL_GPIO_Init+0x318>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01f      	beq.n	800414a <HAL_GPIO_Init+0x21e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a4e      	ldr	r2, [pc, #312]	; (8004248 <HAL_GPIO_Init+0x31c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d019      	beq.n	8004146 <HAL_GPIO_Init+0x21a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a4d      	ldr	r2, [pc, #308]	; (800424c <HAL_GPIO_Init+0x320>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_GPIO_Init+0x216>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a4c      	ldr	r2, [pc, #304]	; (8004250 <HAL_GPIO_Init+0x324>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00d      	beq.n	800413e <HAL_GPIO_Init+0x212>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4b      	ldr	r2, [pc, #300]	; (8004254 <HAL_GPIO_Init+0x328>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d007      	beq.n	800413a <HAL_GPIO_Init+0x20e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <HAL_GPIO_Init+0x32c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_GPIO_Init+0x20a>
 8004132:	2307      	movs	r3, #7
 8004134:	e00e      	b.n	8004154 <HAL_GPIO_Init+0x228>
 8004136:	2308      	movs	r3, #8
 8004138:	e00c      	b.n	8004154 <HAL_GPIO_Init+0x228>
 800413a:	2306      	movs	r3, #6
 800413c:	e00a      	b.n	8004154 <HAL_GPIO_Init+0x228>
 800413e:	2305      	movs	r3, #5
 8004140:	e008      	b.n	8004154 <HAL_GPIO_Init+0x228>
 8004142:	2304      	movs	r3, #4
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x228>
 8004146:	2303      	movs	r3, #3
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x228>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x228>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x228>
 8004152:	2300      	movs	r3, #0
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004164:	4934      	ldr	r1, [pc, #208]	; (8004238 <HAL_GPIO_Init+0x30c>)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <HAL_GPIO_Init+0x330>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004196:	4a31      	ldr	r2, [pc, #196]	; (800425c <HAL_GPIO_Init+0x330>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800419c:	4b2f      	ldr	r3, [pc, #188]	; (800425c <HAL_GPIO_Init+0x330>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <HAL_GPIO_Init+0x330>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041c6:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_GPIO_Init+0x330>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ea:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_GPIO_Init+0x330>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_GPIO_Init+0x330>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <HAL_GPIO_Init+0x330>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f ae90 	bls.w	8003f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004228:	bf00      	nop
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40023800 	.word	0x40023800
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40021c00 	.word	0x40021c00
 800425c:	40013c00 	.word	0x40013c00

08004260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	e001      	b.n	8004282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
 800429c:	4613      	mov	r3, r2
 800429e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042a0:	787b      	ldrb	r3, [r7, #1]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042ac:	e003      	b.n	80042b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	041a      	lsls	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	619a      	str	r2, [r3, #24]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd fee8 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40013c00 	.word	0x40013c00

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e25b      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d075      	beq.n	80043fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	4ba3      	ldr	r3, [pc, #652]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	d00c      	beq.n	8004338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4ba0      	ldr	r3, [pc, #640]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d112      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800432a:	4b9d      	ldr	r3, [pc, #628]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004336:	d10b      	bne.n	8004350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	4b99      	ldr	r3, [pc, #612]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05b      	beq.n	80043fc <HAL_RCC_OscConfig+0x108>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d157      	bne.n	80043fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e236      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d106      	bne.n	8004368 <HAL_RCC_OscConfig+0x74>
 800435a:	4b91      	ldr	r3, [pc, #580]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a90      	ldr	r2, [pc, #576]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e01d      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x98>
 8004372:	4b8b      	ldr	r3, [pc, #556]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a8a      	ldr	r2, [pc, #552]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b88      	ldr	r3, [pc, #544]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a87      	ldr	r2, [pc, #540]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0xb0>
 800438c:	4b84      	ldr	r3, [pc, #528]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a83      	ldr	r2, [pc, #524]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b81      	ldr	r3, [pc, #516]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a80      	ldr	r2, [pc, #512]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fc72 	bl	8002c94 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe fc6e 	bl	8002c94 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	; 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1fb      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0xc0>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fe fc5e 	bl	8002c94 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe fc5a 	bl	8002c94 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1e7      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	4b6c      	ldr	r3, [pc, #432]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0xe8>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d063      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440a:	4b65      	ldr	r3, [pc, #404]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11c      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004422:	4b5f      	ldr	r3, [pc, #380]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d116      	bne.n	800445c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	4b5c      	ldr	r3, [pc, #368]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e1bb      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4952      	ldr	r1, [pc, #328]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	e03a      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004464:	4b4f      	ldr	r3, [pc, #316]	; (80045a4 <HAL_RCC_OscConfig+0x2b0>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fe fc13 	bl	8002c94 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004472:	f7fe fc0f 	bl	8002c94 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e19c      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4940      	ldr	r1, [pc, #256]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
 80044a4:	e015      	b.n	80044d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a6:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <HAL_RCC_OscConfig+0x2b0>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe fbf2 	bl	8002c94 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fe fbee 	bl	8002c94 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e17b      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d030      	beq.n	8004540 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCC_OscConfig+0x2b4>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe fbd2 	bl	8002c94 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fe fbce 	bl	8002c94 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e15b      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x200>
 8004512:	e015      	b.n	8004540 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCC_OscConfig+0x2b4>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7fe fbbb 	bl	8002c94 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004522:	f7fe fbb7 	bl	8002c94 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e144      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a0 	beq.w	800468e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
 800456e:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x2b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d121      	bne.n	80045ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCC_OscConfig+0x2b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <HAL_RCC_OscConfig+0x2b8>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fe fb7d 	bl	8002c94 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	e011      	b.n	80045c2 <HAL_RCC_OscConfig+0x2ce>
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000
 80045a8:	42470e80 	.word	0x42470e80
 80045ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fe fb70 	bl	8002c94 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0fd      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCC_OscConfig+0x4d4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2f0>
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a7c      	ldr	r2, [pc, #496]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
 80045e2:	e01c      	b.n	800461e <HAL_RCC_OscConfig+0x32a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_OscConfig+0x312>
 80045ec:	4b77      	ldr	r3, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a76      	ldr	r2, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b74      	ldr	r3, [pc, #464]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a73      	ldr	r2, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	e00b      	b.n	800461e <HAL_RCC_OscConfig+0x32a>
 8004606:	4b71      	ldr	r3, [pc, #452]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a70      	ldr	r2, [pc, #448]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	4b6e      	ldr	r3, [pc, #440]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a6d      	ldr	r2, [pc, #436]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d015      	beq.n	8004652 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fe fb35 	bl	8002c94 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fb31 	bl	8002c94 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e0bc      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004644:	4b61      	ldr	r3, [pc, #388]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ee      	beq.n	800462e <HAL_RCC_OscConfig+0x33a>
 8004650:	e014      	b.n	800467c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fe fb1f 	bl	8002c94 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fe fb1b 	bl	8002c94 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0a6      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004670:	4b56      	ldr	r3, [pc, #344]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d105      	bne.n	800468e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004682:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a51      	ldr	r2, [pc, #324]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8092 	beq.w	80047bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004698:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d05c      	beq.n	800475e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d141      	bne.n	8004730 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_RCC_OscConfig+0x4dc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fe faef 	bl	8002c94 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe faeb 	bl	8002c94 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e078      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	019b      	lsls	r3, r3, #6
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	4933      	ldr	r1, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004702:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x4dc>)
 8004704:	2201      	movs	r2, #1
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fe fac4 	bl	8002c94 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004710:	f7fe fac0 	bl	8002c94 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e04d      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x41c>
 800472e:	e045      	b.n	80047bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x4dc>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fe faad 	bl	8002c94 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fe faa9 	bl	8002c94 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e036      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004750:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x44a>
 800475c:	e02e      	b.n	80047bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e029      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_RCC_OscConfig+0x4d8>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	429a      	cmp	r2, r3
 800477c:	d11c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d115      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004792:	4013      	ands	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d106      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40007000 	.word	0x40007000
 80047cc:	40023800 	.word	0x40023800
 80047d0:	42470060 	.word	0x42470060

080047d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cc      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b68      	ldr	r3, [pc, #416]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d90c      	bls.n	8004810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b63      	ldr	r3, [pc, #396]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0b8      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004828:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a58      	ldr	r2, [pc, #352]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004840:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a52      	ldr	r2, [pc, #328]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800484a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	494d      	ldr	r1, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d119      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d003      	beq.n	8004892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e067      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b2:	4b37      	ldr	r3, [pc, #220]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4934      	ldr	r1, [pc, #208]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fe f9e6 	bl	8002c94 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048cc:	f7fe f9e2 	bl	8002c94 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 020c 	and.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1eb      	bne.n	80048cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b25      	ldr	r3, [pc, #148]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20c      	bcs.n	800491c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b22      	ldr	r3, [pc, #136]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e032      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4916      	ldr	r1, [pc, #88]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	490e      	ldr	r1, [pc, #56]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800495a:	f000 f821 	bl	80049a0 <HAL_RCC_GetSysClockFreq>
 800495e:	4601      	mov	r1, r0
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	5cd3      	ldrb	r3, [r2, r3]
 800496e:	fa21 f303 	lsr.w	r3, r1, r3
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fc68 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00
 8004990:	40023800 	.word	0x40023800
 8004994:	08006a80 	.word	0x08006a80
 8004998:	20000000 	.word	0x20000000
 800499c:	20000004 	.word	0x20000004

080049a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b6:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d007      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x32>
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d008      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x38>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 808d 	bne.w	8004ae6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_GetSysClockFreq+0x15c>)
 80049ce:	60bb      	str	r3, [r7, #8]
       break;
 80049d0:	e08c      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049d2:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x160>)
 80049d4:	60bb      	str	r3, [r7, #8]
      break;
 80049d6:	e089      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d8:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e2:	4b45      	ldr	r3, [pc, #276]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d023      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ee:	4b42      	ldr	r3, [pc, #264]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	f04f 0400 	mov.w	r4, #0
 80049f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	ea03 0501 	and.w	r5, r3, r1
 8004a04:	ea04 0602 	and.w	r6, r4, r2
 8004a08:	4a3d      	ldr	r2, [pc, #244]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a0a:	fb02 f106 	mul.w	r1, r2, r6
 8004a0e:	2200      	movs	r2, #0
 8004a10:	fb02 f205 	mul.w	r2, r2, r5
 8004a14:	440a      	add	r2, r1
 8004a16:	493a      	ldr	r1, [pc, #232]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a18:	fba5 0101 	umull	r0, r1, r5, r1
 8004a1c:	1853      	adds	r3, r2, r1
 8004a1e:	4619      	mov	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f04f 0400 	mov.w	r4, #0
 8004a26:	461a      	mov	r2, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	f7fc f84b 	bl	8000ac4 <__aeabi_uldivmod>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e049      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	f04f 0400 	mov.w	r4, #0
 8004a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	ea03 0501 	and.w	r5, r3, r1
 8004a4c:	ea04 0602 	and.w	r6, r4, r2
 8004a50:	4629      	mov	r1, r5
 8004a52:	4632      	mov	r2, r6
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	0154      	lsls	r4, r2, #5
 8004a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a62:	014b      	lsls	r3, r1, #5
 8004a64:	4619      	mov	r1, r3
 8004a66:	4622      	mov	r2, r4
 8004a68:	1b49      	subs	r1, r1, r5
 8004a6a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	f04f 0400 	mov.w	r4, #0
 8004a76:	0194      	lsls	r4, r2, #6
 8004a78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a7c:	018b      	lsls	r3, r1, #6
 8004a7e:	1a5b      	subs	r3, r3, r1
 8004a80:	eb64 0402 	sbc.w	r4, r4, r2
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	00e2      	lsls	r2, r4, #3
 8004a8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a92:	00d9      	lsls	r1, r3, #3
 8004a94:	460b      	mov	r3, r1
 8004a96:	4614      	mov	r4, r2
 8004a98:	195b      	adds	r3, r3, r5
 8004a9a:	eb44 0406 	adc.w	r4, r4, r6
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	02a2      	lsls	r2, r4, #10
 8004aa8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004aac:	0299      	lsls	r1, r3, #10
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	461a      	mov	r2, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	f7fc f800 	bl	8000ac4 <__aeabi_uldivmod>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	60bb      	str	r3, [r7, #8]
      break;
 8004ae4:	e002      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ae8:	60bb      	str	r3, [r7, #8]
      break;
 8004aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aec:	68bb      	ldr	r3, [r7, #8]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4601      	mov	r1, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5cd3      	ldrb	r3, [r2, r3]
 8004b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	08006a90 	.word	0x08006a90

08004b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	220f      	movs	r2, #15
 8004b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0203 	and.w	r2, r3, #3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <HAL_RCC_GetClockConfig+0x60>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 020f 	and.w	r2, r3, #15
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40023c00 	.word	0x40023c00

08004ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e01d      	b.n	8004bf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f815 	bl	8004bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f000 fb60 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b06      	cmp	r3, #6
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e01d      	b.n	8004ca8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fd fe35 	bl	80028f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f000 fb07 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fd42 	bl	800574c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_TIM_PWM_Start+0x74>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x2c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <HAL_TIM_PWM_Start+0x78>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_PWM_Start+0x30>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x32>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e083      	b.n	8004e48 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fd fe49 	bl	80029ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d70:	f023 0307 	bic.w	r3, r3, #7
 8004d74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 fa93 	bl	80052ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004dcc:	f023 030c 	bic.w	r3, r3, #12
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	4313      	orrs	r3, r2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	031b      	lsls	r3, r3, #12
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_TIM_Encoder_Start+0x16>
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d008      	beq.n	8004e76 <HAL_TIM_Encoder_Start+0x26>
 8004e64:	e00f      	b.n	8004e86 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fc6c 	bl	800574c <TIM_CCxChannelCmd>
      break;
 8004e74:	e016      	b.n	8004ea4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fc64 	bl	800574c <TIM_CCxChannelCmd>
      break;
 8004e84:	e00e      	b.n	8004ea4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fc5c 	bl	800574c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fc55 	bl	800574c <TIM_CCxChannelCmd>
      break;
 8004ea2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d122      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d11b      	bne.n	8004f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f06f 0202 	mvn.w	r2, #2
 8004eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f9b5 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004f06:	e005      	b.n	8004f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f9a7 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9b8 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d122      	bne.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d11b      	bne.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0204 	mvn.w	r2, #4
 8004f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f98b 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004f5a:	e005      	b.n	8004f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f97d 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f98e 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d122      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d11b      	bne.n	8004fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0208 	mvn.w	r2, #8
 8004f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2204      	movs	r2, #4
 8004f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f961 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004fae:	e005      	b.n	8004fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f953 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f964 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d122      	bne.n	8005016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d11b      	bne.n	8005016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0210 	mvn.w	r2, #16
 8004fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2208      	movs	r2, #8
 8004fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f937 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8005002:	e005      	b.n	8005010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f929 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f93a 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0201 	mvn.w	r2, #1
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fd f8b9 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b80      	cmp	r3, #128	; 0x80
 800504e:	d10e      	bne.n	800506e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d107      	bne.n	800506e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fc6d 	bl	8005948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d10e      	bne.n	800509a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d107      	bne.n	800509a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8ff 	bl	8005298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d10e      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d107      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f06f 0220 	mvn.w	r2, #32
 80050be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fc37 	bl	8005934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e0b4      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	f200 809f 	bhi.w	8005240 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800513d 	.word	0x0800513d
 800510c:	08005241 	.word	0x08005241
 8005110:	08005241 	.word	0x08005241
 8005114:	08005241 	.word	0x08005241
 8005118:	0800517d 	.word	0x0800517d
 800511c:	08005241 	.word	0x08005241
 8005120:	08005241 	.word	0x08005241
 8005124:	08005241 	.word	0x08005241
 8005128:	080051bf 	.word	0x080051bf
 800512c:	08005241 	.word	0x08005241
 8005130:	08005241 	.word	0x08005241
 8005134:	08005241 	.word	0x08005241
 8005138:	080051ff 	.word	0x080051ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f952 	bl	80053ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
      break;
 800517a:	e062      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f9a2 	bl	80054cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]
      break;
 80051bc:	e041      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f9f7 	bl	80055b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0204 	bic.w	r2, r2, #4
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	61da      	str	r2, [r3, #28]
      break;
 80051fc:	e021      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa4b 	bl	80056a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005240:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a40      	ldr	r2, [pc, #256]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d00f      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3d      	ldr	r2, [pc, #244]	; (80053c4 <TIM_Base_SetConfig+0x118>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00b      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <TIM_Base_SetConfig+0x11c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3b      	ldr	r2, [pc, #236]	; (80053cc <TIM_Base_SetConfig+0x120>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3a      	ldr	r2, [pc, #232]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2f      	ldr	r2, [pc, #188]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d02b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530c:	d027      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <TIM_Base_SetConfig+0x118>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d023      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <TIM_Base_SetConfig+0x11c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <TIM_Base_SetConfig+0x120>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <TIM_Base_SetConfig+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <TIM_Base_SetConfig+0x12c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a26      	ldr	r2, [pc, #152]	; (80053dc <TIM_Base_SetConfig+0x130>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <TIM_Base_SetConfig+0x134>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <TIM_Base_SetConfig+0x138>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <TIM_Base_SetConfig+0x13c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <TIM_Base_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0xf8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <TIM_Base_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	615a      	str	r2, [r3, #20]
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	40001800 	.word	0x40001800
 80053e4:	40001c00 	.word	0x40001c00
 80053e8:	40002000 	.word	0x40002000

080053ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 0302 	bic.w	r3, r3, #2
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <TIM_OC1_SetConfig+0xd8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC1_SetConfig+0x64>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <TIM_OC1_SetConfig+0xdc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <TIM_OC1_SetConfig+0xd8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_OC1_SetConfig+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <TIM_OC1_SetConfig+0xdc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40010400 	.word	0x40010400

080054cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 0320 	bic.w	r3, r3, #32
 8005516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC2_SetConfig+0x68>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10d      	bne.n	8005550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_OC2_SetConfig+0xe4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC2_SetConfig+0x94>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC2_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d113      	bne.n	8005588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800556e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a21      	ldr	r2, [pc, #132]	; (8005698 <TIM_OC3_SetConfig+0xe0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10d      	bne.n	800563a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a16      	ldr	r2, [pc, #88]	; (8005698 <TIM_OC3_SetConfig+0xe0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC3_SetConfig+0x92>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d113      	bne.n	8005672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40010000 	.word	0x40010000
 800569c:	40010400 	.word	0x40010400

080056a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <TIM_OC4_SetConfig+0xa4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_OC4_SetConfig+0x68>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a11      	ldr	r2, [pc, #68]	; (8005748 <TIM_OC4_SetConfig+0xa8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d109      	bne.n	800571c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800570e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40010400 	.word	0x40010400

0800574c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2201      	movs	r2, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e05a      	b.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01d      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10c      	bne.n	8005854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40010000 	.word	0x40010000
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40010400 	.word	0x40010400
 8005888:	40014000 	.word	0x40014000
 800588c:	40001800 	.word	0x40001800

08005890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e03d      	b.n	8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <__libc_init_array>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4e0d      	ldr	r6, [pc, #52]	; (8005994 <__libc_init_array+0x38>)
 8005960:	4c0d      	ldr	r4, [pc, #52]	; (8005998 <__libc_init_array+0x3c>)
 8005962:	1ba4      	subs	r4, r4, r6
 8005964:	10a4      	asrs	r4, r4, #2
 8005966:	2500      	movs	r5, #0
 8005968:	42a5      	cmp	r5, r4
 800596a:	d109      	bne.n	8005980 <__libc_init_array+0x24>
 800596c:	4e0b      	ldr	r6, [pc, #44]	; (800599c <__libc_init_array+0x40>)
 800596e:	4c0c      	ldr	r4, [pc, #48]	; (80059a0 <__libc_init_array+0x44>)
 8005970:	f001 f878 	bl	8006a64 <_init>
 8005974:	1ba4      	subs	r4, r4, r6
 8005976:	10a4      	asrs	r4, r4, #2
 8005978:	2500      	movs	r5, #0
 800597a:	42a5      	cmp	r5, r4
 800597c:	d105      	bne.n	800598a <__libc_init_array+0x2e>
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005984:	4798      	blx	r3
 8005986:	3501      	adds	r5, #1
 8005988:	e7ee      	b.n	8005968 <__libc_init_array+0xc>
 800598a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800598e:	4798      	blx	r3
 8005990:	3501      	adds	r5, #1
 8005992:	e7f2      	b.n	800597a <__libc_init_array+0x1e>
 8005994:	08006c80 	.word	0x08006c80
 8005998:	08006c80 	.word	0x08006c80
 800599c:	08006c80 	.word	0x08006c80
 80059a0:	08006c84 	.word	0x08006c84

080059a4 <memset>:
 80059a4:	4402      	add	r2, r0
 80059a6:	4603      	mov	r3, r0
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d100      	bne.n	80059ae <memset+0xa>
 80059ac:	4770      	bx	lr
 80059ae:	f803 1b01 	strb.w	r1, [r3], #1
 80059b2:	e7f9      	b.n	80059a8 <memset+0x4>
 80059b4:	0000      	movs	r0, r0
	...

080059b8 <cos>:
 80059b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ba:	ec51 0b10 	vmov	r0, r1, d0
 80059be:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <cos+0x80>)
 80059c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059c4:	4293      	cmp	r3, r2
 80059c6:	dc06      	bgt.n	80059d6 <cos+0x1e>
 80059c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8005a30 <cos+0x78>
 80059cc:	f000 fa74 	bl	8005eb8 <__kernel_cos>
 80059d0:	ec51 0b10 	vmov	r0, r1, d0
 80059d4:	e007      	b.n	80059e6 <cos+0x2e>
 80059d6:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <cos+0x84>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	dd09      	ble.n	80059f0 <cos+0x38>
 80059dc:	ee10 2a10 	vmov	r2, s0
 80059e0:	460b      	mov	r3, r1
 80059e2:	f7fa fbf5 	bl	80001d0 <__aeabi_dsub>
 80059e6:	ec41 0b10 	vmov	d0, r0, r1
 80059ea:	b005      	add	sp, #20
 80059ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80059f0:	4668      	mov	r0, sp
 80059f2:	f000 f86d 	bl	8005ad0 <__ieee754_rem_pio2>
 80059f6:	f000 0003 	and.w	r0, r0, #3
 80059fa:	2801      	cmp	r0, #1
 80059fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a00:	ed9d 0b00 	vldr	d0, [sp]
 8005a04:	d007      	beq.n	8005a16 <cos+0x5e>
 8005a06:	2802      	cmp	r0, #2
 8005a08:	d00e      	beq.n	8005a28 <cos+0x70>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0de      	beq.n	80059cc <cos+0x14>
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f000 fe5a 	bl	80066c8 <__kernel_sin>
 8005a14:	e7dc      	b.n	80059d0 <cos+0x18>
 8005a16:	f000 fe57 	bl	80066c8 <__kernel_sin>
 8005a1a:	ec53 2b10 	vmov	r2, r3, d0
 8005a1e:	ee10 0a10 	vmov	r0, s0
 8005a22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a26:	e7de      	b.n	80059e6 <cos+0x2e>
 8005a28:	f000 fa46 	bl	8005eb8 <__kernel_cos>
 8005a2c:	e7f5      	b.n	8005a1a <cos+0x62>
 8005a2e:	bf00      	nop
	...
 8005a38:	3fe921fb 	.word	0x3fe921fb
 8005a3c:	7fefffff 	.word	0x7fefffff

08005a40 <sin>:
 8005a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a42:	ec51 0b10 	vmov	r0, r1, d0
 8005a46:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <sin+0x88>)
 8005a48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	dc07      	bgt.n	8005a60 <sin+0x20>
 8005a50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005ac0 <sin+0x80>
 8005a54:	2000      	movs	r0, #0
 8005a56:	f000 fe37 	bl	80066c8 <__kernel_sin>
 8005a5a:	ec51 0b10 	vmov	r0, r1, d0
 8005a5e:	e007      	b.n	8005a70 <sin+0x30>
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <sin+0x8c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	dd09      	ble.n	8005a7a <sin+0x3a>
 8005a66:	ee10 2a10 	vmov	r2, s0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	f7fa fbb0 	bl	80001d0 <__aeabi_dsub>
 8005a70:	ec41 0b10 	vmov	d0, r0, r1
 8005a74:	b005      	add	sp, #20
 8005a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a7a:	4668      	mov	r0, sp
 8005a7c:	f000 f828 	bl	8005ad0 <__ieee754_rem_pio2>
 8005a80:	f000 0003 	and.w	r0, r0, #3
 8005a84:	2801      	cmp	r0, #1
 8005a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a8a:	ed9d 0b00 	vldr	d0, [sp]
 8005a8e:	d004      	beq.n	8005a9a <sin+0x5a>
 8005a90:	2802      	cmp	r0, #2
 8005a92:	d005      	beq.n	8005aa0 <sin+0x60>
 8005a94:	b970      	cbnz	r0, 8005ab4 <sin+0x74>
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7dd      	b.n	8005a56 <sin+0x16>
 8005a9a:	f000 fa0d 	bl	8005eb8 <__kernel_cos>
 8005a9e:	e7dc      	b.n	8005a5a <sin+0x1a>
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f000 fe11 	bl	80066c8 <__kernel_sin>
 8005aa6:	ec53 2b10 	vmov	r2, r3, d0
 8005aaa:	ee10 0a10 	vmov	r0, s0
 8005aae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ab2:	e7dd      	b.n	8005a70 <sin+0x30>
 8005ab4:	f000 fa00 	bl	8005eb8 <__kernel_cos>
 8005ab8:	e7f5      	b.n	8005aa6 <sin+0x66>
 8005aba:	bf00      	nop
 8005abc:	f3af 8000 	nop.w
	...
 8005ac8:	3fe921fb 	.word	0x3fe921fb
 8005acc:	7fefffff 	.word	0x7fefffff

08005ad0 <__ieee754_rem_pio2>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	ec57 6b10 	vmov	r6, r7, d0
 8005ad8:	4bc3      	ldr	r3, [pc, #780]	; (8005de8 <__ieee754_rem_pio2+0x318>)
 8005ada:	b08d      	sub	sp, #52	; 0x34
 8005adc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ae0:	4598      	cmp	r8, r3
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	9704      	str	r7, [sp, #16]
 8005ae6:	dc07      	bgt.n	8005af8 <__ieee754_rem_pio2+0x28>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	ed84 0b00 	vstr	d0, [r4]
 8005af0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005af4:	2500      	movs	r5, #0
 8005af6:	e027      	b.n	8005b48 <__ieee754_rem_pio2+0x78>
 8005af8:	4bbc      	ldr	r3, [pc, #752]	; (8005dec <__ieee754_rem_pio2+0x31c>)
 8005afa:	4598      	cmp	r8, r3
 8005afc:	dc75      	bgt.n	8005bea <__ieee754_rem_pio2+0x11a>
 8005afe:	9b04      	ldr	r3, [sp, #16]
 8005b00:	4dbb      	ldr	r5, [pc, #748]	; (8005df0 <__ieee754_rem_pio2+0x320>)
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	ee10 0a10 	vmov	r0, s0
 8005b08:	a3a9      	add	r3, pc, #676	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	4639      	mov	r1, r7
 8005b10:	dd36      	ble.n	8005b80 <__ieee754_rem_pio2+0xb0>
 8005b12:	f7fa fb5d 	bl	80001d0 <__aeabi_dsub>
 8005b16:	45a8      	cmp	r8, r5
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	d018      	beq.n	8005b50 <__ieee754_rem_pio2+0x80>
 8005b1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fb54 	bl	80001d0 <__aeabi_dsub>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	e9c4 2300 	strd	r2, r3, [r4]
 8005b30:	4630      	mov	r0, r6
 8005b32:	4639      	mov	r1, r7
 8005b34:	f7fa fb4c 	bl	80001d0 <__aeabi_dsub>
 8005b38:	a39f      	add	r3, pc, #636	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb47 	bl	80001d0 <__aeabi_dsub>
 8005b42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b46:	2501      	movs	r5, #1
 8005b48:	4628      	mov	r0, r5
 8005b4a:	b00d      	add	sp, #52	; 0x34
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	a39b      	add	r3, pc, #620	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fb3b 	bl	80001d0 <__aeabi_dsub>
 8005b5a:	a39b      	add	r3, pc, #620	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	4606      	mov	r6, r0
 8005b62:	460f      	mov	r7, r1
 8005b64:	f7fa fb34 	bl	80001d0 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	e9c4 2300 	strd	r2, r3, [r4]
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa fb2c 	bl	80001d0 <__aeabi_dsub>
 8005b78:	a393      	add	r3, pc, #588	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	e7de      	b.n	8005b3e <__ieee754_rem_pio2+0x6e>
 8005b80:	f7fa fb28 	bl	80001d4 <__adddf3>
 8005b84:	45a8      	cmp	r8, r5
 8005b86:	4606      	mov	r6, r0
 8005b88:	460f      	mov	r7, r1
 8005b8a:	d016      	beq.n	8005bba <__ieee754_rem_pio2+0xea>
 8005b8c:	a38a      	add	r3, pc, #552	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fb1f 	bl	80001d4 <__adddf3>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	e9c4 2300 	strd	r2, r3, [r4]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa fb15 	bl	80001d0 <__aeabi_dsub>
 8005ba6:	a384      	add	r3, pc, #528	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f7fa fb12 	bl	80001d4 <__adddf3>
 8005bb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005bb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bb8:	e7c6      	b.n	8005b48 <__ieee754_rem_pio2+0x78>
 8005bba:	a381      	add	r3, pc, #516	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f7fa fb08 	bl	80001d4 <__adddf3>
 8005bc4:	a380      	add	r3, pc, #512	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	f7fa fb01 	bl	80001d4 <__adddf3>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9c4 2300 	strd	r2, r3, [r4]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa faf7 	bl	80001d0 <__aeabi_dsub>
 8005be2:	a379      	add	r3, pc, #484	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	e7e0      	b.n	8005bac <__ieee754_rem_pio2+0xdc>
 8005bea:	4b82      	ldr	r3, [pc, #520]	; (8005df4 <__ieee754_rem_pio2+0x324>)
 8005bec:	4598      	cmp	r8, r3
 8005bee:	f300 80d0 	bgt.w	8005d92 <__ieee754_rem_pio2+0x2c2>
 8005bf2:	f000 fe23 	bl	800683c <fabs>
 8005bf6:	ec57 6b10 	vmov	r6, r7, d0
 8005bfa:	ee10 0a10 	vmov	r0, s0
 8005bfe:	a374      	add	r3, pc, #464	; (adr r3, 8005dd0 <__ieee754_rem_pio2+0x300>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fc9b 	bl	8000540 <__aeabi_dmul>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4b7a      	ldr	r3, [pc, #488]	; (8005df8 <__ieee754_rem_pio2+0x328>)
 8005c0e:	f7fa fae1 	bl	80001d4 <__adddf3>
 8005c12:	f7fa ff2f 	bl	8000a74 <__aeabi_d2iz>
 8005c16:	4605      	mov	r5, r0
 8005c18:	f7fa fc28 	bl	800046c <__aeabi_i2d>
 8005c1c:	a364      	add	r3, pc, #400	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x2e0>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c26:	f7fa fc8b 	bl	8000540 <__aeabi_dmul>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa facd 	bl	80001d0 <__aeabi_dsub>
 8005c36:	a360      	add	r3, pc, #384	; (adr r3, 8005db8 <__ieee754_rem_pio2+0x2e8>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	468b      	mov	fp, r1
 8005c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c44:	f7fa fc7c 	bl	8000540 <__aeabi_dmul>
 8005c48:	2d1f      	cmp	r5, #31
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	dc0c      	bgt.n	8005c6a <__ieee754_rem_pio2+0x19a>
 8005c50:	1e6a      	subs	r2, r5, #1
 8005c52:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <__ieee754_rem_pio2+0x32c>)
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	d006      	beq.n	8005c6a <__ieee754_rem_pio2+0x19a>
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	463b      	mov	r3, r7
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	f7fa fab4 	bl	80001d0 <__aeabi_dsub>
 8005c68:	e00e      	b.n	8005c88 <__ieee754_rem_pio2+0x1b8>
 8005c6a:	4632      	mov	r2, r6
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4650      	mov	r0, sl
 8005c70:	4659      	mov	r1, fp
 8005c72:	f7fa faad 	bl	80001d0 <__aeabi_dsub>
 8005c76:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c7a:	9305      	str	r3, [sp, #20]
 8005c7c:	9a05      	ldr	r2, [sp, #20]
 8005c7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	dc02      	bgt.n	8005c8e <__ieee754_rem_pio2+0x1be>
 8005c88:	e9c4 0100 	strd	r0, r1, [r4]
 8005c8c:	e039      	b.n	8005d02 <__ieee754_rem_pio2+0x232>
 8005c8e:	a34c      	add	r3, pc, #304	; (adr r3, 8005dc0 <__ieee754_rem_pio2+0x2f0>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c98:	f7fa fc52 	bl	8000540 <__aeabi_dmul>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	f7fa fa92 	bl	80001d0 <__aeabi_dsub>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	4689      	mov	r9, r1
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	f7fa fa8a 	bl	80001d0 <__aeabi_dsub>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f7fa fa86 	bl	80001d0 <__aeabi_dsub>
 8005cc4:	a340      	add	r3, pc, #256	; (adr r3, 8005dc8 <__ieee754_rem_pio2+0x2f8>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd2:	f7fa fc35 	bl	8000540 <__aeabi_dmul>
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	463b      	mov	r3, r7
 8005cda:	f7fa fa79 	bl	80001d0 <__aeabi_dsub>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fa71 	bl	80001d0 <__aeabi_dsub>
 8005cee:	9a05      	ldr	r2, [sp, #20]
 8005cf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b31      	cmp	r3, #49	; 0x31
 8005cf8:	dc20      	bgt.n	8005d3c <__ieee754_rem_pio2+0x26c>
 8005cfa:	e9c4 0100 	strd	r0, r1, [r4]
 8005cfe:	46c2      	mov	sl, r8
 8005d00:	46cb      	mov	fp, r9
 8005d02:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005d06:	4650      	mov	r0, sl
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	f7fa fa5f 	bl	80001d0 <__aeabi_dsub>
 8005d12:	463b      	mov	r3, r7
 8005d14:	4632      	mov	r2, r6
 8005d16:	f7fa fa5b 	bl	80001d0 <__aeabi_dsub>
 8005d1a:	9b04      	ldr	r3, [sp, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d22:	f6bf af11 	bge.w	8005b48 <__ieee754_rem_pio2+0x78>
 8005d26:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	f8c4 8000 	str.w	r8, [r4]
 8005d30:	60a0      	str	r0, [r4, #8]
 8005d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d36:	60e3      	str	r3, [r4, #12]
 8005d38:	426d      	negs	r5, r5
 8005d3a:	e705      	b.n	8005b48 <__ieee754_rem_pio2+0x78>
 8005d3c:	a326      	add	r3, pc, #152	; (adr r3, 8005dd8 <__ieee754_rem_pio2+0x308>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d46:	f7fa fbfb 	bl	8000540 <__aeabi_dmul>
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	460f      	mov	r7, r1
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	f7fa fa3b 	bl	80001d0 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4682      	mov	sl, r0
 8005d60:	468b      	mov	fp, r1
 8005d62:	4640      	mov	r0, r8
 8005d64:	4649      	mov	r1, r9
 8005d66:	f7fa fa33 	bl	80001d0 <__aeabi_dsub>
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	f7fa fa2f 	bl	80001d0 <__aeabi_dsub>
 8005d72:	a31b      	add	r3, pc, #108	; (adr r3, 8005de0 <__ieee754_rem_pio2+0x310>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d80:	f7fa fbde 	bl	8000540 <__aeabi_dmul>
 8005d84:	4632      	mov	r2, r6
 8005d86:	463b      	mov	r3, r7
 8005d88:	f7fa fa22 	bl	80001d0 <__aeabi_dsub>
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	e764      	b.n	8005c5c <__ieee754_rem_pio2+0x18c>
 8005d92:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <__ieee754_rem_pio2+0x330>)
 8005d94:	4598      	cmp	r8, r3
 8005d96:	dd35      	ble.n	8005e04 <__ieee754_rem_pio2+0x334>
 8005d98:	ee10 2a10 	vmov	r2, s0
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	f7fa fa15 	bl	80001d0 <__aeabi_dsub>
 8005da6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005daa:	e9c4 0100 	strd	r0, r1, [r4]
 8005dae:	e6a1      	b.n	8005af4 <__ieee754_rem_pio2+0x24>
 8005db0:	54400000 	.word	0x54400000
 8005db4:	3ff921fb 	.word	0x3ff921fb
 8005db8:	1a626331 	.word	0x1a626331
 8005dbc:	3dd0b461 	.word	0x3dd0b461
 8005dc0:	1a600000 	.word	0x1a600000
 8005dc4:	3dd0b461 	.word	0x3dd0b461
 8005dc8:	2e037073 	.word	0x2e037073
 8005dcc:	3ba3198a 	.word	0x3ba3198a
 8005dd0:	6dc9c883 	.word	0x6dc9c883
 8005dd4:	3fe45f30 	.word	0x3fe45f30
 8005dd8:	2e000000 	.word	0x2e000000
 8005ddc:	3ba3198a 	.word	0x3ba3198a
 8005de0:	252049c1 	.word	0x252049c1
 8005de4:	397b839a 	.word	0x397b839a
 8005de8:	3fe921fb 	.word	0x3fe921fb
 8005dec:	4002d97b 	.word	0x4002d97b
 8005df0:	3ff921fb 	.word	0x3ff921fb
 8005df4:	413921fb 	.word	0x413921fb
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	08006aa0 	.word	0x08006aa0
 8005e00:	7fefffff 	.word	0x7fefffff
 8005e04:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005e08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005e0c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005e10:	4630      	mov	r0, r6
 8005e12:	460f      	mov	r7, r1
 8005e14:	f7fa fe2e 	bl	8000a74 <__aeabi_d2iz>
 8005e18:	f7fa fb28 	bl	800046c <__aeabi_i2d>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e28:	f7fa f9d2 	bl	80001d0 <__aeabi_dsub>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <__ieee754_rem_pio2+0x3dc>)
 8005e30:	f7fa fb86 	bl	8000540 <__aeabi_dmul>
 8005e34:	460f      	mov	r7, r1
 8005e36:	4606      	mov	r6, r0
 8005e38:	f7fa fe1c 	bl	8000a74 <__aeabi_d2iz>
 8005e3c:	f7fa fb16 	bl	800046c <__aeabi_i2d>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4630      	mov	r0, r6
 8005e46:	4639      	mov	r1, r7
 8005e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e4c:	f7fa f9c0 	bl	80001d0 <__aeabi_dsub>
 8005e50:	2200      	movs	r2, #0
 8005e52:	4b16      	ldr	r3, [pc, #88]	; (8005eac <__ieee754_rem_pio2+0x3dc>)
 8005e54:	f7fa fb74 	bl	8000540 <__aeabi_dmul>
 8005e58:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e5c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005e60:	f04f 0803 	mov.w	r8, #3
 8005e64:	2600      	movs	r6, #0
 8005e66:	2700      	movs	r7, #0
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005e70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8005e74:	f7fa fdcc 	bl	8000a10 <__aeabi_dcmpeq>
 8005e78:	b9b0      	cbnz	r0, 8005ea8 <__ieee754_rem_pio2+0x3d8>
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <__ieee754_rem_pio2+0x3e0>)
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	2302      	movs	r3, #2
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	462a      	mov	r2, r5
 8005e84:	4643      	mov	r3, r8
 8005e86:	4621      	mov	r1, r4
 8005e88:	a806      	add	r0, sp, #24
 8005e8a:	f000 f8dd 	bl	8006048 <__kernel_rem_pio2>
 8005e8e:	9b04      	ldr	r3, [sp, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	4605      	mov	r5, r0
 8005e94:	f6bf ae58 	bge.w	8005b48 <__ieee754_rem_pio2+0x78>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e9e:	6063      	str	r3, [r4, #4]
 8005ea0:	68e3      	ldr	r3, [r4, #12]
 8005ea2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ea6:	e746      	b.n	8005d36 <__ieee754_rem_pio2+0x266>
 8005ea8:	46d0      	mov	r8, sl
 8005eaa:	e7dd      	b.n	8005e68 <__ieee754_rem_pio2+0x398>
 8005eac:	41700000 	.word	0x41700000
 8005eb0:	08006b20 	.word	0x08006b20
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <__kernel_cos>:
 8005eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	ec59 8b10 	vmov	r8, r9, d0
 8005ec0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005ec4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005ec8:	ed2d 8b02 	vpush	{d8}
 8005ecc:	eeb0 8a41 	vmov.f32	s16, s2
 8005ed0:	eef0 8a61 	vmov.f32	s17, s3
 8005ed4:	da07      	bge.n	8005ee6 <__kernel_cos+0x2e>
 8005ed6:	ee10 0a10 	vmov	r0, s0
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fdca 	bl	8000a74 <__aeabi_d2iz>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	f000 8089 	beq.w	8005ff8 <__kernel_cos+0x140>
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	464b      	mov	r3, r9
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa fb27 	bl	8000540 <__aeabi_dmul>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <__kernel_cos+0x178>)
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	f7fa fb21 	bl	8000540 <__aeabi_dmul>
 8005efe:	a340      	add	r3, pc, #256	; (adr r3, 8006000 <__kernel_cos+0x148>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	4682      	mov	sl, r0
 8005f06:	468b      	mov	fp, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa fb18 	bl	8000540 <__aeabi_dmul>
 8005f10:	a33d      	add	r3, pc, #244	; (adr r3, 8006008 <__kernel_cos+0x150>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa f95d 	bl	80001d4 <__adddf3>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f7fa fb0f 	bl	8000540 <__aeabi_dmul>
 8005f22:	a33b      	add	r3, pc, #236	; (adr r3, 8006010 <__kernel_cos+0x158>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f7fa f952 	bl	80001d0 <__aeabi_dsub>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	f7fa fb06 	bl	8000540 <__aeabi_dmul>
 8005f34:	a338      	add	r3, pc, #224	; (adr r3, 8006018 <__kernel_cos+0x160>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f94b 	bl	80001d4 <__adddf3>
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	f7fa fafd 	bl	8000540 <__aeabi_dmul>
 8005f46:	a336      	add	r3, pc, #216	; (adr r3, 8006020 <__kernel_cos+0x168>)
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f7fa f940 	bl	80001d0 <__aeabi_dsub>
 8005f50:	4622      	mov	r2, r4
 8005f52:	462b      	mov	r3, r5
 8005f54:	f7fa faf4 	bl	8000540 <__aeabi_dmul>
 8005f58:	a333      	add	r3, pc, #204	; (adr r3, 8006028 <__kernel_cos+0x170>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa f939 	bl	80001d4 <__adddf3>
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	f7fa faeb 	bl	8000540 <__aeabi_dmul>
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	f7fa fae7 	bl	8000540 <__aeabi_dmul>
 8005f72:	ec53 2b18 	vmov	r2, r3, d8
 8005f76:	4604      	mov	r4, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fadf 	bl	8000540 <__aeabi_dmul>
 8005f82:	460b      	mov	r3, r1
 8005f84:	4602      	mov	r2, r0
 8005f86:	4629      	mov	r1, r5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7fa f921 	bl	80001d0 <__aeabi_dsub>
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <__kernel_cos+0x17c>)
 8005f90:	429e      	cmp	r6, r3
 8005f92:	4680      	mov	r8, r0
 8005f94:	4689      	mov	r9, r1
 8005f96:	dc11      	bgt.n	8005fbc <__kernel_cos+0x104>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	4659      	mov	r1, fp
 8005fa0:	f7fa f916 	bl	80001d0 <__aeabi_dsub>
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4924      	ldr	r1, [pc, #144]	; (8006038 <__kernel_cos+0x180>)
 8005fa8:	4602      	mov	r2, r0
 8005faa:	2000      	movs	r0, #0
 8005fac:	f7fa f910 	bl	80001d0 <__aeabi_dsub>
 8005fb0:	ecbd 8b02 	vpop	{d8}
 8005fb4:	ec41 0b10 	vmov	d0, r0, r1
 8005fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	; (800603c <__kernel_cos+0x184>)
 8005fbe:	491e      	ldr	r1, [pc, #120]	; (8006038 <__kernel_cos+0x180>)
 8005fc0:	429e      	cmp	r6, r3
 8005fc2:	bfcc      	ite	gt
 8005fc4:	4d1e      	ldrgt	r5, [pc, #120]	; (8006040 <__kernel_cos+0x188>)
 8005fc6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005fca:	2400      	movs	r4, #0
 8005fcc:	4622      	mov	r2, r4
 8005fce:	462b      	mov	r3, r5
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f7fa f8fd 	bl	80001d0 <__aeabi_dsub>
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460f      	mov	r7, r1
 8005fdc:	462b      	mov	r3, r5
 8005fde:	4650      	mov	r0, sl
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	f7fa f8f5 	bl	80001d0 <__aeabi_dsub>
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	464b      	mov	r3, r9
 8005fea:	f7fa f8f1 	bl	80001d0 <__aeabi_dsub>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	e7d9      	b.n	8005fac <__kernel_cos+0xf4>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	490f      	ldr	r1, [pc, #60]	; (8006038 <__kernel_cos+0x180>)
 8005ffc:	e7d8      	b.n	8005fb0 <__kernel_cos+0xf8>
 8005ffe:	bf00      	nop
 8006000:	be8838d4 	.word	0xbe8838d4
 8006004:	bda8fae9 	.word	0xbda8fae9
 8006008:	bdb4b1c4 	.word	0xbdb4b1c4
 800600c:	3e21ee9e 	.word	0x3e21ee9e
 8006010:	809c52ad 	.word	0x809c52ad
 8006014:	3e927e4f 	.word	0x3e927e4f
 8006018:	19cb1590 	.word	0x19cb1590
 800601c:	3efa01a0 	.word	0x3efa01a0
 8006020:	16c15177 	.word	0x16c15177
 8006024:	3f56c16c 	.word	0x3f56c16c
 8006028:	5555554c 	.word	0x5555554c
 800602c:	3fa55555 	.word	0x3fa55555
 8006030:	3fe00000 	.word	0x3fe00000
 8006034:	3fd33332 	.word	0x3fd33332
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	3fe90000 	.word	0x3fe90000
 8006040:	3fd20000 	.word	0x3fd20000
 8006044:	00000000 	.word	0x00000000

08006048 <__kernel_rem_pio2>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	ed2d 8b02 	vpush	{d8}
 8006050:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006054:	1ed4      	subs	r4, r2, #3
 8006056:	9308      	str	r3, [sp, #32]
 8006058:	9101      	str	r1, [sp, #4]
 800605a:	4bc5      	ldr	r3, [pc, #788]	; (8006370 <__kernel_rem_pio2+0x328>)
 800605c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800605e:	9009      	str	r0, [sp, #36]	; 0x24
 8006060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	9b08      	ldr	r3, [sp, #32]
 8006068:	3b01      	subs	r3, #1
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	2318      	movs	r3, #24
 800606e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006072:	f06f 0317 	mvn.w	r3, #23
 8006076:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800607a:	fb04 3303 	mla	r3, r4, r3, r3
 800607e:	eb03 0a02 	add.w	sl, r3, r2
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	9a07      	ldr	r2, [sp, #28]
 8006086:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006360 <__kernel_rem_pio2+0x318>
 800608a:	eb03 0802 	add.w	r8, r3, r2
 800608e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006090:	1aa7      	subs	r7, r4, r2
 8006092:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006096:	ae22      	add	r6, sp, #136	; 0x88
 8006098:	2500      	movs	r5, #0
 800609a:	4545      	cmp	r5, r8
 800609c:	dd13      	ble.n	80060c6 <__kernel_rem_pio2+0x7e>
 800609e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006360 <__kernel_rem_pio2+0x318>
 80060a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80060a6:	2600      	movs	r6, #0
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	429e      	cmp	r6, r3
 80060ac:	dc32      	bgt.n	8006114 <__kernel_rem_pio2+0xcc>
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	9b08      	ldr	r3, [sp, #32]
 80060b4:	199d      	adds	r5, r3, r6
 80060b6:	ab22      	add	r3, sp, #136	; 0x88
 80060b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060bc:	9306      	str	r3, [sp, #24]
 80060be:	ec59 8b18 	vmov	r8, r9, d8
 80060c2:	2700      	movs	r7, #0
 80060c4:	e01f      	b.n	8006106 <__kernel_rem_pio2+0xbe>
 80060c6:	42ef      	cmn	r7, r5
 80060c8:	d407      	bmi.n	80060da <__kernel_rem_pio2+0x92>
 80060ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060ce:	f7fa f9cd 	bl	800046c <__aeabi_i2d>
 80060d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7df      	b.n	800609a <__kernel_rem_pio2+0x52>
 80060da:	ec51 0b18 	vmov	r0, r1, d8
 80060de:	e7f8      	b.n	80060d2 <__kernel_rem_pio2+0x8a>
 80060e0:	9906      	ldr	r1, [sp, #24]
 80060e2:	9d02      	ldr	r5, [sp, #8]
 80060e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80060e8:	9106      	str	r1, [sp, #24]
 80060ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80060ee:	9502      	str	r5, [sp, #8]
 80060f0:	f7fa fa26 	bl	8000540 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa f86a 	bl	80001d4 <__adddf3>
 8006100:	3701      	adds	r7, #1
 8006102:	4680      	mov	r8, r0
 8006104:	4689      	mov	r9, r1
 8006106:	9b07      	ldr	r3, [sp, #28]
 8006108:	429f      	cmp	r7, r3
 800610a:	dde9      	ble.n	80060e0 <__kernel_rem_pio2+0x98>
 800610c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006110:	3601      	adds	r6, #1
 8006112:	e7c9      	b.n	80060a8 <__kernel_rem_pio2+0x60>
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	aa0e      	add	r2, sp, #56	; 0x38
 8006118:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800611c:	930c      	str	r3, [sp, #48]	; 0x30
 800611e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006120:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006124:	9c04      	ldr	r4, [sp, #16]
 8006126:	930b      	str	r3, [sp, #44]	; 0x2c
 8006128:	ab9a      	add	r3, sp, #616	; 0x268
 800612a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800612e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006132:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006136:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800613a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800613e:	ab9a      	add	r3, sp, #616	; 0x268
 8006140:	445b      	add	r3, fp
 8006142:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8006146:	2500      	movs	r5, #0
 8006148:	1b63      	subs	r3, r4, r5
 800614a:	2b00      	cmp	r3, #0
 800614c:	dc78      	bgt.n	8006240 <__kernel_rem_pio2+0x1f8>
 800614e:	4650      	mov	r0, sl
 8006150:	ec49 8b10 	vmov	d0, r8, r9
 8006154:	f000 fc00 	bl	8006958 <scalbn>
 8006158:	ec57 6b10 	vmov	r6, r7, d0
 800615c:	2200      	movs	r2, #0
 800615e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006162:	ee10 0a10 	vmov	r0, s0
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa f9ea 	bl	8000540 <__aeabi_dmul>
 800616c:	ec41 0b10 	vmov	d0, r0, r1
 8006170:	f000 fb6e 	bl	8006850 <floor>
 8006174:	2200      	movs	r2, #0
 8006176:	ec51 0b10 	vmov	r0, r1, d0
 800617a:	4b7e      	ldr	r3, [pc, #504]	; (8006374 <__kernel_rem_pio2+0x32c>)
 800617c:	f7fa f9e0 	bl	8000540 <__aeabi_dmul>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4630      	mov	r0, r6
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa f822 	bl	80001d0 <__aeabi_dsub>
 800618c:	460f      	mov	r7, r1
 800618e:	4606      	mov	r6, r0
 8006190:	f7fa fc70 	bl	8000a74 <__aeabi_d2iz>
 8006194:	9006      	str	r0, [sp, #24]
 8006196:	f7fa f969 	bl	800046c <__aeabi_i2d>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4630      	mov	r0, r6
 80061a0:	4639      	mov	r1, r7
 80061a2:	f7fa f815 	bl	80001d0 <__aeabi_dsub>
 80061a6:	f1ba 0f00 	cmp.w	sl, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	dd6c      	ble.n	800628a <__kernel_rem_pio2+0x242>
 80061b0:	1e62      	subs	r2, r4, #1
 80061b2:	ab0e      	add	r3, sp, #56	; 0x38
 80061b4:	f1ca 0118 	rsb	r1, sl, #24
 80061b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061bc:	9d06      	ldr	r5, [sp, #24]
 80061be:	fa40 f301 	asr.w	r3, r0, r1
 80061c2:	441d      	add	r5, r3
 80061c4:	408b      	lsls	r3, r1
 80061c6:	1ac0      	subs	r0, r0, r3
 80061c8:	ab0e      	add	r3, sp, #56	; 0x38
 80061ca:	9506      	str	r5, [sp, #24]
 80061cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80061d0:	f1ca 0317 	rsb	r3, sl, #23
 80061d4:	fa40 f303 	asr.w	r3, r0, r3
 80061d8:	9302      	str	r3, [sp, #8]
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd62      	ble.n	80062a6 <__kernel_rem_pio2+0x25e>
 80061e0:	9b06      	ldr	r3, [sp, #24]
 80061e2:	2200      	movs	r2, #0
 80061e4:	3301      	adds	r3, #1
 80061e6:	9306      	str	r3, [sp, #24]
 80061e8:	4615      	mov	r5, r2
 80061ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80061ee:	4294      	cmp	r4, r2
 80061f0:	f300 8095 	bgt.w	800631e <__kernel_rem_pio2+0x2d6>
 80061f4:	f1ba 0f00 	cmp.w	sl, #0
 80061f8:	dd07      	ble.n	800620a <__kernel_rem_pio2+0x1c2>
 80061fa:	f1ba 0f01 	cmp.w	sl, #1
 80061fe:	f000 80a2 	beq.w	8006346 <__kernel_rem_pio2+0x2fe>
 8006202:	f1ba 0f02 	cmp.w	sl, #2
 8006206:	f000 80c1 	beq.w	800638c <__kernel_rem_pio2+0x344>
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d14a      	bne.n	80062a6 <__kernel_rem_pio2+0x25e>
 8006210:	4632      	mov	r2, r6
 8006212:	463b      	mov	r3, r7
 8006214:	2000      	movs	r0, #0
 8006216:	4958      	ldr	r1, [pc, #352]	; (8006378 <__kernel_rem_pio2+0x330>)
 8006218:	f7f9 ffda 	bl	80001d0 <__aeabi_dsub>
 800621c:	4606      	mov	r6, r0
 800621e:	460f      	mov	r7, r1
 8006220:	2d00      	cmp	r5, #0
 8006222:	d040      	beq.n	80062a6 <__kernel_rem_pio2+0x25e>
 8006224:	4650      	mov	r0, sl
 8006226:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006368 <__kernel_rem_pio2+0x320>
 800622a:	f000 fb95 	bl	8006958 <scalbn>
 800622e:	4630      	mov	r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	ec53 2b10 	vmov	r2, r3, d0
 8006236:	f7f9 ffcb 	bl	80001d0 <__aeabi_dsub>
 800623a:	4606      	mov	r6, r0
 800623c:	460f      	mov	r7, r1
 800623e:	e032      	b.n	80062a6 <__kernel_rem_pio2+0x25e>
 8006240:	2200      	movs	r2, #0
 8006242:	4b4e      	ldr	r3, [pc, #312]	; (800637c <__kernel_rem_pio2+0x334>)
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f7fa f97a 	bl	8000540 <__aeabi_dmul>
 800624c:	f7fa fc12 	bl	8000a74 <__aeabi_d2iz>
 8006250:	f7fa f90c 	bl	800046c <__aeabi_i2d>
 8006254:	2200      	movs	r2, #0
 8006256:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <__kernel_rem_pio2+0x338>)
 8006258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800625c:	f7fa f970 	bl	8000540 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4640      	mov	r0, r8
 8006266:	4649      	mov	r1, r9
 8006268:	f7f9 ffb2 	bl	80001d0 <__aeabi_dsub>
 800626c:	f7fa fc02 	bl	8000a74 <__aeabi_d2iz>
 8006270:	ab0e      	add	r3, sp, #56	; 0x38
 8006272:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006276:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800627a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627e:	f7f9 ffa9 	bl	80001d4 <__adddf3>
 8006282:	3501      	adds	r5, #1
 8006284:	4680      	mov	r8, r0
 8006286:	4689      	mov	r9, r1
 8006288:	e75e      	b.n	8006148 <__kernel_rem_pio2+0x100>
 800628a:	d105      	bne.n	8006298 <__kernel_rem_pio2+0x250>
 800628c:	1e63      	subs	r3, r4, #1
 800628e:	aa0e      	add	r2, sp, #56	; 0x38
 8006290:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006294:	15c3      	asrs	r3, r0, #23
 8006296:	e79f      	b.n	80061d8 <__kernel_rem_pio2+0x190>
 8006298:	2200      	movs	r2, #0
 800629a:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <__kernel_rem_pio2+0x33c>)
 800629c:	f7fa fbd6 	bl	8000a4c <__aeabi_dcmpge>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d139      	bne.n	8006318 <__kernel_rem_pio2+0x2d0>
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	2300      	movs	r3, #0
 80062aa:	4630      	mov	r0, r6
 80062ac:	4639      	mov	r1, r7
 80062ae:	f7fa fbaf 	bl	8000a10 <__aeabi_dcmpeq>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f000 80c7 	beq.w	8006446 <__kernel_rem_pio2+0x3fe>
 80062b8:	1e65      	subs	r5, r4, #1
 80062ba:	462b      	mov	r3, r5
 80062bc:	2200      	movs	r2, #0
 80062be:	9904      	ldr	r1, [sp, #16]
 80062c0:	428b      	cmp	r3, r1
 80062c2:	da6a      	bge.n	800639a <__kernel_rem_pio2+0x352>
 80062c4:	2a00      	cmp	r2, #0
 80062c6:	f000 8088 	beq.w	80063da <__kernel_rem_pio2+0x392>
 80062ca:	ab0e      	add	r3, sp, #56	; 0x38
 80062cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80062d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80b4 	beq.w	8006442 <__kernel_rem_pio2+0x3fa>
 80062da:	4650      	mov	r0, sl
 80062dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006368 <__kernel_rem_pio2+0x320>
 80062e0:	f000 fb3a 	bl	8006958 <scalbn>
 80062e4:	00ec      	lsls	r4, r5, #3
 80062e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80062e8:	191e      	adds	r6, r3, r4
 80062ea:	ec59 8b10 	vmov	r8, r9, d0
 80062ee:	f106 0a08 	add.w	sl, r6, #8
 80062f2:	462f      	mov	r7, r5
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f280 80df 	bge.w	80064b8 <__kernel_rem_pio2+0x470>
 80062fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006360 <__kernel_rem_pio2+0x318>
 80062fe:	f04f 0a00 	mov.w	sl, #0
 8006302:	eba5 030a 	sub.w	r3, r5, sl
 8006306:	2b00      	cmp	r3, #0
 8006308:	f2c0 810a 	blt.w	8006520 <__kernel_rem_pio2+0x4d8>
 800630c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006388 <__kernel_rem_pio2+0x340>
 8006310:	ec59 8b18 	vmov	r8, r9, d8
 8006314:	2700      	movs	r7, #0
 8006316:	e0f5      	b.n	8006504 <__kernel_rem_pio2+0x4bc>
 8006318:	2302      	movs	r3, #2
 800631a:	9302      	str	r3, [sp, #8]
 800631c:	e760      	b.n	80061e0 <__kernel_rem_pio2+0x198>
 800631e:	ab0e      	add	r3, sp, #56	; 0x38
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	b94d      	cbnz	r5, 800633a <__kernel_rem_pio2+0x2f2>
 8006326:	b12b      	cbz	r3, 8006334 <__kernel_rem_pio2+0x2ec>
 8006328:	a80e      	add	r0, sp, #56	; 0x38
 800632a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800632e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006332:	2301      	movs	r3, #1
 8006334:	3201      	adds	r2, #1
 8006336:	461d      	mov	r5, r3
 8006338:	e759      	b.n	80061ee <__kernel_rem_pio2+0x1a6>
 800633a:	a80e      	add	r0, sp, #56	; 0x38
 800633c:	1acb      	subs	r3, r1, r3
 800633e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006342:	462b      	mov	r3, r5
 8006344:	e7f6      	b.n	8006334 <__kernel_rem_pio2+0x2ec>
 8006346:	1e62      	subs	r2, r4, #1
 8006348:	ab0e      	add	r3, sp, #56	; 0x38
 800634a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006352:	a90e      	add	r1, sp, #56	; 0x38
 8006354:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006358:	e757      	b.n	800620a <__kernel_rem_pio2+0x1c2>
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w
	...
 800636c:	3ff00000 	.word	0x3ff00000
 8006370:	08006c68 	.word	0x08006c68
 8006374:	40200000 	.word	0x40200000
 8006378:	3ff00000 	.word	0x3ff00000
 800637c:	3e700000 	.word	0x3e700000
 8006380:	41700000 	.word	0x41700000
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	08006c28 	.word	0x08006c28
 800638c:	1e62      	subs	r2, r4, #1
 800638e:	ab0e      	add	r3, sp, #56	; 0x38
 8006390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006394:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006398:	e7db      	b.n	8006352 <__kernel_rem_pio2+0x30a>
 800639a:	a90e      	add	r1, sp, #56	; 0x38
 800639c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	430a      	orrs	r2, r1
 80063a4:	e78b      	b.n	80062be <__kernel_rem_pio2+0x276>
 80063a6:	3301      	adds	r3, #1
 80063a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80063ac:	2900      	cmp	r1, #0
 80063ae:	d0fa      	beq.n	80063a6 <__kernel_rem_pio2+0x35e>
 80063b0:	9a08      	ldr	r2, [sp, #32]
 80063b2:	4422      	add	r2, r4
 80063b4:	00d2      	lsls	r2, r2, #3
 80063b6:	a922      	add	r1, sp, #136	; 0x88
 80063b8:	18e3      	adds	r3, r4, r3
 80063ba:	9206      	str	r2, [sp, #24]
 80063bc:	440a      	add	r2, r1
 80063be:	9302      	str	r3, [sp, #8]
 80063c0:	f10b 0108 	add.w	r1, fp, #8
 80063c4:	f102 0308 	add.w	r3, r2, #8
 80063c8:	1c66      	adds	r6, r4, #1
 80063ca:	910a      	str	r1, [sp, #40]	; 0x28
 80063cc:	2500      	movs	r5, #0
 80063ce:	930d      	str	r3, [sp, #52]	; 0x34
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	42b3      	cmp	r3, r6
 80063d4:	da04      	bge.n	80063e0 <__kernel_rem_pio2+0x398>
 80063d6:	461c      	mov	r4, r3
 80063d8:	e6a6      	b.n	8006128 <__kernel_rem_pio2+0xe0>
 80063da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063dc:	2301      	movs	r3, #1
 80063de:	e7e3      	b.n	80063a8 <__kernel_rem_pio2+0x360>
 80063e0:	9b06      	ldr	r3, [sp, #24]
 80063e2:	18ef      	adds	r7, r5, r3
 80063e4:	ab22      	add	r3, sp, #136	; 0x88
 80063e6:	441f      	add	r7, r3
 80063e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063ee:	f7fa f83d 	bl	800046c <__aeabi_i2d>
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	461c      	mov	r4, r3
 80063f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f8:	e9c7 0100 	strd	r0, r1, [r7]
 80063fc:	eb03 0b05 	add.w	fp, r3, r5
 8006400:	2700      	movs	r7, #0
 8006402:	f04f 0800 	mov.w	r8, #0
 8006406:	f04f 0900 	mov.w	r9, #0
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	429f      	cmp	r7, r3
 800640e:	dd08      	ble.n	8006422 <__kernel_rem_pio2+0x3da>
 8006410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006412:	aa72      	add	r2, sp, #456	; 0x1c8
 8006414:	18eb      	adds	r3, r5, r3
 8006416:	4413      	add	r3, r2
 8006418:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800641c:	3601      	adds	r6, #1
 800641e:	3508      	adds	r5, #8
 8006420:	e7d6      	b.n	80063d0 <__kernel_rem_pio2+0x388>
 8006422:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006426:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800642a:	f7fa f889 	bl	8000540 <__aeabi_dmul>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f7f9 fecd 	bl	80001d4 <__adddf3>
 800643a:	3701      	adds	r7, #1
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	e7e3      	b.n	800640a <__kernel_rem_pio2+0x3c2>
 8006442:	3d01      	subs	r5, #1
 8006444:	e741      	b.n	80062ca <__kernel_rem_pio2+0x282>
 8006446:	f1ca 0000 	rsb	r0, sl, #0
 800644a:	ec47 6b10 	vmov	d0, r6, r7
 800644e:	f000 fa83 	bl	8006958 <scalbn>
 8006452:	ec57 6b10 	vmov	r6, r7, d0
 8006456:	2200      	movs	r2, #0
 8006458:	4b99      	ldr	r3, [pc, #612]	; (80066c0 <__kernel_rem_pio2+0x678>)
 800645a:	ee10 0a10 	vmov	r0, s0
 800645e:	4639      	mov	r1, r7
 8006460:	f7fa faf4 	bl	8000a4c <__aeabi_dcmpge>
 8006464:	b1f8      	cbz	r0, 80064a6 <__kernel_rem_pio2+0x45e>
 8006466:	2200      	movs	r2, #0
 8006468:	4b96      	ldr	r3, [pc, #600]	; (80066c4 <__kernel_rem_pio2+0x67c>)
 800646a:	4630      	mov	r0, r6
 800646c:	4639      	mov	r1, r7
 800646e:	f7fa f867 	bl	8000540 <__aeabi_dmul>
 8006472:	f7fa faff 	bl	8000a74 <__aeabi_d2iz>
 8006476:	4680      	mov	r8, r0
 8006478:	f7f9 fff8 	bl	800046c <__aeabi_i2d>
 800647c:	2200      	movs	r2, #0
 800647e:	4b90      	ldr	r3, [pc, #576]	; (80066c0 <__kernel_rem_pio2+0x678>)
 8006480:	f7fa f85e 	bl	8000540 <__aeabi_dmul>
 8006484:	460b      	mov	r3, r1
 8006486:	4602      	mov	r2, r0
 8006488:	4639      	mov	r1, r7
 800648a:	4630      	mov	r0, r6
 800648c:	f7f9 fea0 	bl	80001d0 <__aeabi_dsub>
 8006490:	f7fa faf0 	bl	8000a74 <__aeabi_d2iz>
 8006494:	1c65      	adds	r5, r4, #1
 8006496:	ab0e      	add	r3, sp, #56	; 0x38
 8006498:	f10a 0a18 	add.w	sl, sl, #24
 800649c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80064a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80064a4:	e719      	b.n	80062da <__kernel_rem_pio2+0x292>
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa fae3 	bl	8000a74 <__aeabi_d2iz>
 80064ae:	ab0e      	add	r3, sp, #56	; 0x38
 80064b0:	4625      	mov	r5, r4
 80064b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80064b6:	e710      	b.n	80062da <__kernel_rem_pio2+0x292>
 80064b8:	ab0e      	add	r3, sp, #56	; 0x38
 80064ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80064be:	f7f9 ffd5 	bl	800046c <__aeabi_i2d>
 80064c2:	4642      	mov	r2, r8
 80064c4:	464b      	mov	r3, r9
 80064c6:	f7fa f83b 	bl	8000540 <__aeabi_dmul>
 80064ca:	2200      	movs	r2, #0
 80064cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80064d0:	4b7c      	ldr	r3, [pc, #496]	; (80066c4 <__kernel_rem_pio2+0x67c>)
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7fa f833 	bl	8000540 <__aeabi_dmul>
 80064da:	3f01      	subs	r7, #1
 80064dc:	4680      	mov	r8, r0
 80064de:	4689      	mov	r9, r1
 80064e0:	e708      	b.n	80062f4 <__kernel_rem_pio2+0x2ac>
 80064e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80064ee:	f7fa f827 	bl	8000540 <__aeabi_dmul>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7f9 fe6b 	bl	80001d4 <__adddf3>
 80064fe:	3701      	adds	r7, #1
 8006500:	4680      	mov	r8, r0
 8006502:	4689      	mov	r9, r1
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	429f      	cmp	r7, r3
 8006508:	dc01      	bgt.n	800650e <__kernel_rem_pio2+0x4c6>
 800650a:	45ba      	cmp	sl, r7
 800650c:	dae9      	bge.n	80064e2 <__kernel_rem_pio2+0x49a>
 800650e:	ab4a      	add	r3, sp, #296	; 0x128
 8006510:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006514:	e9c3 8900 	strd	r8, r9, [r3]
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	3e08      	subs	r6, #8
 800651e:	e6f0      	b.n	8006302 <__kernel_rem_pio2+0x2ba>
 8006520:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006522:	2b03      	cmp	r3, #3
 8006524:	d85b      	bhi.n	80065de <__kernel_rem_pio2+0x596>
 8006526:	e8df f003 	tbb	[pc, r3]
 800652a:	264a      	.short	0x264a
 800652c:	0226      	.short	0x0226
 800652e:	ab9a      	add	r3, sp, #616	; 0x268
 8006530:	441c      	add	r4, r3
 8006532:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006536:	46a2      	mov	sl, r4
 8006538:	46ab      	mov	fp, r5
 800653a:	f1bb 0f00 	cmp.w	fp, #0
 800653e:	dc6c      	bgt.n	800661a <__kernel_rem_pio2+0x5d2>
 8006540:	46a2      	mov	sl, r4
 8006542:	46ab      	mov	fp, r5
 8006544:	f1bb 0f01 	cmp.w	fp, #1
 8006548:	f300 8086 	bgt.w	8006658 <__kernel_rem_pio2+0x610>
 800654c:	2000      	movs	r0, #0
 800654e:	2100      	movs	r1, #0
 8006550:	2d01      	cmp	r5, #1
 8006552:	f300 80a0 	bgt.w	8006696 <__kernel_rem_pio2+0x64e>
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800655c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 809e 	bne.w	80066a2 <__kernel_rem_pio2+0x65a>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	e9c3 7800 	strd	r7, r8, [r3]
 800656c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006570:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006574:	e033      	b.n	80065de <__kernel_rem_pio2+0x596>
 8006576:	3408      	adds	r4, #8
 8006578:	ab4a      	add	r3, sp, #296	; 0x128
 800657a:	441c      	add	r4, r3
 800657c:	462e      	mov	r6, r5
 800657e:	2000      	movs	r0, #0
 8006580:	2100      	movs	r1, #0
 8006582:	2e00      	cmp	r6, #0
 8006584:	da3a      	bge.n	80065fc <__kernel_rem_pio2+0x5b4>
 8006586:	9b02      	ldr	r3, [sp, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d03d      	beq.n	8006608 <__kernel_rem_pio2+0x5c0>
 800658c:	4602      	mov	r2, r0
 800658e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006592:	9c01      	ldr	r4, [sp, #4]
 8006594:	e9c4 2300 	strd	r2, r3, [r4]
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80065a0:	f7f9 fe16 	bl	80001d0 <__aeabi_dsub>
 80065a4:	ae4c      	add	r6, sp, #304	; 0x130
 80065a6:	2401      	movs	r4, #1
 80065a8:	42a5      	cmp	r5, r4
 80065aa:	da30      	bge.n	800660e <__kernel_rem_pio2+0x5c6>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	b113      	cbz	r3, 80065b6 <__kernel_rem_pio2+0x56e>
 80065b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b4:	4619      	mov	r1, r3
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80065bc:	e00f      	b.n	80065de <__kernel_rem_pio2+0x596>
 80065be:	ab9a      	add	r3, sp, #616	; 0x268
 80065c0:	441c      	add	r4, r3
 80065c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80065c6:	2000      	movs	r0, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	da10      	bge.n	80065f0 <__kernel_rem_pio2+0x5a8>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	b113      	cbz	r3, 80065d8 <__kernel_rem_pio2+0x590>
 80065d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065d6:	4619      	mov	r1, r3
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	e9c3 0100 	strd	r0, r1, [r3]
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	f003 0007 	and.w	r0, r3, #7
 80065e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80065e8:	ecbd 8b02 	vpop	{d8}
 80065ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80065f4:	f7f9 fdee 	bl	80001d4 <__adddf3>
 80065f8:	3d01      	subs	r5, #1
 80065fa:	e7e6      	b.n	80065ca <__kernel_rem_pio2+0x582>
 80065fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006600:	f7f9 fde8 	bl	80001d4 <__adddf3>
 8006604:	3e01      	subs	r6, #1
 8006606:	e7bc      	b.n	8006582 <__kernel_rem_pio2+0x53a>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	e7c1      	b.n	8006592 <__kernel_rem_pio2+0x54a>
 800660e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006612:	f7f9 fddf 	bl	80001d4 <__adddf3>
 8006616:	3401      	adds	r4, #1
 8006618:	e7c6      	b.n	80065a8 <__kernel_rem_pio2+0x560>
 800661a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800661e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006622:	4640      	mov	r0, r8
 8006624:	ec53 2b17 	vmov	r2, r3, d7
 8006628:	4649      	mov	r1, r9
 800662a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800662e:	f7f9 fdd1 	bl	80001d4 <__adddf3>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7f9 fdc7 	bl	80001d0 <__aeabi_dsub>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	f7f9 fdc5 	bl	80001d4 <__adddf3>
 800664a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800664e:	e9ca 0100 	strd	r0, r1, [sl]
 8006652:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006656:	e770      	b.n	800653a <__kernel_rem_pio2+0x4f2>
 8006658:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800665c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006660:	4630      	mov	r0, r6
 8006662:	ec53 2b17 	vmov	r2, r3, d7
 8006666:	4639      	mov	r1, r7
 8006668:	ed8d 7b04 	vstr	d7, [sp, #16]
 800666c:	f7f9 fdb2 	bl	80001d4 <__adddf3>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fda8 	bl	80001d0 <__aeabi_dsub>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	f7f9 fda6 	bl	80001d4 <__adddf3>
 8006688:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800668c:	e9ca 0100 	strd	r0, r1, [sl]
 8006690:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006694:	e756      	b.n	8006544 <__kernel_rem_pio2+0x4fc>
 8006696:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800669a:	f7f9 fd9b 	bl	80001d4 <__adddf3>
 800669e:	3d01      	subs	r5, #1
 80066a0:	e756      	b.n	8006550 <__kernel_rem_pio2+0x508>
 80066a2:	9b01      	ldr	r3, [sp, #4]
 80066a4:	9a01      	ldr	r2, [sp, #4]
 80066a6:	601f      	str	r7, [r3, #0]
 80066a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80066ac:	605c      	str	r4, [r3, #4]
 80066ae:	609d      	str	r5, [r3, #8]
 80066b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80066b4:	60d3      	str	r3, [r2, #12]
 80066b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066ba:	6110      	str	r0, [r2, #16]
 80066bc:	6153      	str	r3, [r2, #20]
 80066be:	e78e      	b.n	80065de <__kernel_rem_pio2+0x596>
 80066c0:	41700000 	.word	0x41700000
 80066c4:	3e700000 	.word	0x3e700000

080066c8 <__kernel_sin>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	ec55 4b10 	vmov	r4, r5, d0
 80066d0:	b085      	sub	sp, #20
 80066d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066da:	ed8d 1b00 	vstr	d1, [sp]
 80066de:	9002      	str	r0, [sp, #8]
 80066e0:	da06      	bge.n	80066f0 <__kernel_sin+0x28>
 80066e2:	ee10 0a10 	vmov	r0, s0
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7fa f9c4 	bl	8000a74 <__aeabi_d2iz>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d051      	beq.n	8006794 <__kernel_sin+0xcc>
 80066f0:	4622      	mov	r2, r4
 80066f2:	462b      	mov	r3, r5
 80066f4:	4620      	mov	r0, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	f7f9 ff22 	bl	8000540 <__aeabi_dmul>
 80066fc:	4682      	mov	sl, r0
 80066fe:	468b      	mov	fp, r1
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4620      	mov	r0, r4
 8006706:	4629      	mov	r1, r5
 8006708:	f7f9 ff1a 	bl	8000540 <__aeabi_dmul>
 800670c:	a341      	add	r3, pc, #260	; (adr r3, 8006814 <__kernel_sin+0x14c>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	4680      	mov	r8, r0
 8006714:	4689      	mov	r9, r1
 8006716:	4650      	mov	r0, sl
 8006718:	4659      	mov	r1, fp
 800671a:	f7f9 ff11 	bl	8000540 <__aeabi_dmul>
 800671e:	a33f      	add	r3, pc, #252	; (adr r3, 800681c <__kernel_sin+0x154>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 fd54 	bl	80001d0 <__aeabi_dsub>
 8006728:	4652      	mov	r2, sl
 800672a:	465b      	mov	r3, fp
 800672c:	f7f9 ff08 	bl	8000540 <__aeabi_dmul>
 8006730:	a33c      	add	r3, pc, #240	; (adr r3, 8006824 <__kernel_sin+0x15c>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 fd4d 	bl	80001d4 <__adddf3>
 800673a:	4652      	mov	r2, sl
 800673c:	465b      	mov	r3, fp
 800673e:	f7f9 feff 	bl	8000540 <__aeabi_dmul>
 8006742:	a33a      	add	r3, pc, #232	; (adr r3, 800682c <__kernel_sin+0x164>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 fd42 	bl	80001d0 <__aeabi_dsub>
 800674c:	4652      	mov	r2, sl
 800674e:	465b      	mov	r3, fp
 8006750:	f7f9 fef6 	bl	8000540 <__aeabi_dmul>
 8006754:	a337      	add	r3, pc, #220	; (adr r3, 8006834 <__kernel_sin+0x16c>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7f9 fd3b 	bl	80001d4 <__adddf3>
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	4606      	mov	r6, r0
 8006762:	460f      	mov	r7, r1
 8006764:	b9db      	cbnz	r3, 800679e <__kernel_sin+0xd6>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4650      	mov	r0, sl
 800676c:	4659      	mov	r1, fp
 800676e:	f7f9 fee7 	bl	8000540 <__aeabi_dmul>
 8006772:	a325      	add	r3, pc, #148	; (adr r3, 8006808 <__kernel_sin+0x140>)
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f7f9 fd2a 	bl	80001d0 <__aeabi_dsub>
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	f7f9 fede 	bl	8000540 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4620      	mov	r0, r4
 800678a:	4629      	mov	r1, r5
 800678c:	f7f9 fd22 	bl	80001d4 <__adddf3>
 8006790:	4604      	mov	r4, r0
 8006792:	460d      	mov	r5, r1
 8006794:	ec45 4b10 	vmov	d0, r4, r5
 8006798:	b005      	add	sp, #20
 800679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679e:	2200      	movs	r2, #0
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <__kernel_sin+0x148>)
 80067a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067a6:	f7f9 fecb 	bl	8000540 <__aeabi_dmul>
 80067aa:	4632      	mov	r2, r6
 80067ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b0:	463b      	mov	r3, r7
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7f9 fec3 	bl	8000540 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	f7f9 fd05 	bl	80001d0 <__aeabi_dsub>
 80067c6:	4652      	mov	r2, sl
 80067c8:	465b      	mov	r3, fp
 80067ca:	f7f9 feb9 	bl	8000540 <__aeabi_dmul>
 80067ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d2:	f7f9 fcfd 	bl	80001d0 <__aeabi_dsub>
 80067d6:	a30c      	add	r3, pc, #48	; (adr r3, 8006808 <__kernel_sin+0x140>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 feac 	bl	8000540 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4630      	mov	r0, r6
 80067ee:	4639      	mov	r1, r7
 80067f0:	f7f9 fcf0 	bl	80001d4 <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4620      	mov	r0, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fce8 	bl	80001d0 <__aeabi_dsub>
 8006800:	e7c6      	b.n	8006790 <__kernel_sin+0xc8>
 8006802:	bf00      	nop
 8006804:	f3af 8000 	nop.w
 8006808:	55555549 	.word	0x55555549
 800680c:	3fc55555 	.word	0x3fc55555
 8006810:	3fe00000 	.word	0x3fe00000
 8006814:	5acfd57c 	.word	0x5acfd57c
 8006818:	3de5d93a 	.word	0x3de5d93a
 800681c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006820:	3e5ae5e6 	.word	0x3e5ae5e6
 8006824:	57b1fe7d 	.word	0x57b1fe7d
 8006828:	3ec71de3 	.word	0x3ec71de3
 800682c:	19c161d5 	.word	0x19c161d5
 8006830:	3f2a01a0 	.word	0x3f2a01a0
 8006834:	1110f8a6 	.word	0x1110f8a6
 8006838:	3f811111 	.word	0x3f811111

0800683c <fabs>:
 800683c:	ec51 0b10 	vmov	r0, r1, d0
 8006840:	ee10 2a10 	vmov	r2, s0
 8006844:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006848:	ec43 2b10 	vmov	d0, r2, r3
 800684c:	4770      	bx	lr
	...

08006850 <floor>:
 8006850:	ec51 0b10 	vmov	r0, r1, d0
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800685c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006860:	2e13      	cmp	r6, #19
 8006862:	460c      	mov	r4, r1
 8006864:	ee10 5a10 	vmov	r5, s0
 8006868:	4680      	mov	r8, r0
 800686a:	dc34      	bgt.n	80068d6 <floor+0x86>
 800686c:	2e00      	cmp	r6, #0
 800686e:	da16      	bge.n	800689e <floor+0x4e>
 8006870:	a335      	add	r3, pc, #212	; (adr r3, 8006948 <floor+0xf8>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fcad 	bl	80001d4 <__adddf3>
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	f7fa f8ef 	bl	8000a60 <__aeabi_dcmpgt>
 8006882:	b148      	cbz	r0, 8006898 <floor+0x48>
 8006884:	2c00      	cmp	r4, #0
 8006886:	da59      	bge.n	800693c <floor+0xec>
 8006888:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800688c:	4a30      	ldr	r2, [pc, #192]	; (8006950 <floor+0x100>)
 800688e:	432b      	orrs	r3, r5
 8006890:	2500      	movs	r5, #0
 8006892:	42ab      	cmp	r3, r5
 8006894:	bf18      	it	ne
 8006896:	4614      	movne	r4, r2
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	e025      	b.n	80068ea <floor+0x9a>
 800689e:	4f2d      	ldr	r7, [pc, #180]	; (8006954 <floor+0x104>)
 80068a0:	4137      	asrs	r7, r6
 80068a2:	ea01 0307 	and.w	r3, r1, r7
 80068a6:	4303      	orrs	r3, r0
 80068a8:	d01f      	beq.n	80068ea <floor+0x9a>
 80068aa:	a327      	add	r3, pc, #156	; (adr r3, 8006948 <floor+0xf8>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 fc90 	bl	80001d4 <__adddf3>
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	f7fa f8d2 	bl	8000a60 <__aeabi_dcmpgt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d0eb      	beq.n	8006898 <floor+0x48>
 80068c0:	2c00      	cmp	r4, #0
 80068c2:	bfbe      	ittt	lt
 80068c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80068cc:	19a4      	addlt	r4, r4, r6
 80068ce:	ea24 0407 	bic.w	r4, r4, r7
 80068d2:	2500      	movs	r5, #0
 80068d4:	e7e0      	b.n	8006898 <floor+0x48>
 80068d6:	2e33      	cmp	r6, #51	; 0x33
 80068d8:	dd0b      	ble.n	80068f2 <floor+0xa2>
 80068da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068de:	d104      	bne.n	80068ea <floor+0x9a>
 80068e0:	ee10 2a10 	vmov	r2, s0
 80068e4:	460b      	mov	r3, r1
 80068e6:	f7f9 fc75 	bl	80001d4 <__adddf3>
 80068ea:	ec41 0b10 	vmov	d0, r0, r1
 80068ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068fa:	fa23 f707 	lsr.w	r7, r3, r7
 80068fe:	4207      	tst	r7, r0
 8006900:	d0f3      	beq.n	80068ea <floor+0x9a>
 8006902:	a311      	add	r3, pc, #68	; (adr r3, 8006948 <floor+0xf8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fc64 	bl	80001d4 <__adddf3>
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	f7fa f8a6 	bl	8000a60 <__aeabi_dcmpgt>
 8006914:	2800      	cmp	r0, #0
 8006916:	d0bf      	beq.n	8006898 <floor+0x48>
 8006918:	2c00      	cmp	r4, #0
 800691a:	da02      	bge.n	8006922 <floor+0xd2>
 800691c:	2e14      	cmp	r6, #20
 800691e:	d103      	bne.n	8006928 <floor+0xd8>
 8006920:	3401      	adds	r4, #1
 8006922:	ea25 0507 	bic.w	r5, r5, r7
 8006926:	e7b7      	b.n	8006898 <floor+0x48>
 8006928:	2301      	movs	r3, #1
 800692a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800692e:	fa03 f606 	lsl.w	r6, r3, r6
 8006932:	4435      	add	r5, r6
 8006934:	4545      	cmp	r5, r8
 8006936:	bf38      	it	cc
 8006938:	18e4      	addcc	r4, r4, r3
 800693a:	e7f2      	b.n	8006922 <floor+0xd2>
 800693c:	2500      	movs	r5, #0
 800693e:	462c      	mov	r4, r5
 8006940:	e7aa      	b.n	8006898 <floor+0x48>
 8006942:	bf00      	nop
 8006944:	f3af 8000 	nop.w
 8006948:	8800759c 	.word	0x8800759c
 800694c:	7e37e43c 	.word	0x7e37e43c
 8006950:	bff00000 	.word	0xbff00000
 8006954:	000fffff 	.word	0x000fffff

08006958 <scalbn>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	ec55 4b10 	vmov	r4, r5, d0
 800695e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006962:	4606      	mov	r6, r0
 8006964:	462b      	mov	r3, r5
 8006966:	b9aa      	cbnz	r2, 8006994 <scalbn+0x3c>
 8006968:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800696c:	4323      	orrs	r3, r4
 800696e:	d03b      	beq.n	80069e8 <scalbn+0x90>
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <scalbn+0xe0>)
 8006972:	4629      	mov	r1, r5
 8006974:	2200      	movs	r2, #0
 8006976:	ee10 0a10 	vmov	r0, s0
 800697a:	f7f9 fde1 	bl	8000540 <__aeabi_dmul>
 800697e:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <scalbn+0xe4>)
 8006980:	429e      	cmp	r6, r3
 8006982:	4604      	mov	r4, r0
 8006984:	460d      	mov	r5, r1
 8006986:	da12      	bge.n	80069ae <scalbn+0x56>
 8006988:	a327      	add	r3, pc, #156	; (adr r3, 8006a28 <scalbn+0xd0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fdd7 	bl	8000540 <__aeabi_dmul>
 8006992:	e009      	b.n	80069a8 <scalbn+0x50>
 8006994:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006998:	428a      	cmp	r2, r1
 800699a:	d10c      	bne.n	80069b6 <scalbn+0x5e>
 800699c:	ee10 2a10 	vmov	r2, s0
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	f7f9 fc16 	bl	80001d4 <__adddf3>
 80069a8:	4604      	mov	r4, r0
 80069aa:	460d      	mov	r5, r1
 80069ac:	e01c      	b.n	80069e8 <scalbn+0x90>
 80069ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069b2:	460b      	mov	r3, r1
 80069b4:	3a36      	subs	r2, #54	; 0x36
 80069b6:	4432      	add	r2, r6
 80069b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80069bc:	428a      	cmp	r2, r1
 80069be:	dd0b      	ble.n	80069d8 <scalbn+0x80>
 80069c0:	ec45 4b11 	vmov	d1, r4, r5
 80069c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006a30 <scalbn+0xd8>
 80069c8:	f000 f83c 	bl	8006a44 <copysign>
 80069cc:	a318      	add	r3, pc, #96	; (adr r3, 8006a30 <scalbn+0xd8>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	ec51 0b10 	vmov	r0, r1, d0
 80069d6:	e7da      	b.n	800698e <scalbn+0x36>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	dd08      	ble.n	80069ee <scalbn+0x96>
 80069dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069e8:	ec45 4b10 	vmov	d0, r4, r5
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80069f2:	da0d      	bge.n	8006a10 <scalbn+0xb8>
 80069f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80069f8:	429e      	cmp	r6, r3
 80069fa:	ec45 4b11 	vmov	d1, r4, r5
 80069fe:	dce1      	bgt.n	80069c4 <scalbn+0x6c>
 8006a00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006a28 <scalbn+0xd0>
 8006a04:	f000 f81e 	bl	8006a44 <copysign>
 8006a08:	a307      	add	r3, pc, #28	; (adr r3, 8006a28 <scalbn+0xd0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	e7e0      	b.n	80069d2 <scalbn+0x7a>
 8006a10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a14:	3236      	adds	r2, #54	; 0x36
 8006a16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <scalbn+0xe8>)
 8006a26:	e7b2      	b.n	800698e <scalbn+0x36>
 8006a28:	c2f8f359 	.word	0xc2f8f359
 8006a2c:	01a56e1f 	.word	0x01a56e1f
 8006a30:	8800759c 	.word	0x8800759c
 8006a34:	7e37e43c 	.word	0x7e37e43c
 8006a38:	43500000 	.word	0x43500000
 8006a3c:	ffff3cb0 	.word	0xffff3cb0
 8006a40:	3c900000 	.word	0x3c900000

08006a44 <copysign>:
 8006a44:	ec51 0b10 	vmov	r0, r1, d0
 8006a48:	ee11 0a90 	vmov	r0, s3
 8006a4c:	ee10 2a10 	vmov	r2, s0
 8006a50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006a54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006a58:	ea41 0300 	orr.w	r3, r1, r0
 8006a5c:	ec43 2b10 	vmov	d0, r2, r3
 8006a60:	4770      	bx	lr
	...

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
